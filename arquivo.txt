
==> arquivo.txt <==
[Arquivo bin√°rio omitido]

==> .gitignore <==
backend/node_modules

==> docker-compose.yml <==
services:
  backend:
    build:
      context: ./backend
    container_name: backend-pong
    networks:
      - pong-net
    volumes:
      - ./backend:/app
      - /app/node_modules

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: frontend-pong
    ports:
      - "8080:80"
    networks:
      - pong-net
    depends_on:
      - backend

networks:
  pong-net:
    driver: bridge
==> frontend/tailwind.config.js <==
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts}",
  ],
  theme: {
    extend: {
      fontFamily: {
        'press-start': ['"Press Start 2P"', 'cursive'],
      },
      boxShadow: {
        'retro': '0 0 20px rgba(255, 255, 255, 0.5)',
        'retro-hover': '0 4px 10px rgba(79, 70, 229, 0.5)',
      },
    },
  },
  plugins: [],
}
==> frontend/package.json <==
{
  "name": "transcendence-frontend",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.4",
    "typescript": "^5.2.2",
    "vite": "^5.2.0"
  }
}
==> frontend/tsconfig.json <==
{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": ["ESNext", "DOM", "DOM.Iterable"],
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
==> frontend/src/pong/game.ts <==
interface Paddle {
  x: number; y: number; width: number; height: number; score: number;
}
interface Ball {
  x: number; y: number; radius: number; speedX: number; speedY: number;
}

let canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D;
let ball: Ball, player1: Paddle, player2: Paddle;
let gameMode: 'singleplayer' | 'multiplayer';
let animationFrameId: number | null = null;
const keys: { [key: string]: boolean } = {};

const PADDLE_WIDTH = 15, PADDLE_HEIGHT = 100, BALL_RADIUS = 10;
const PADDLE_SPEED = 8, AI_SPEED = 5;

function keyDownHandler(e: KeyboardEvent) { keys[e.key] = true; }
function keyUpHandler(e: KeyboardEvent) { keys[e.key] = false; }

export function initPongGame(mode: 'singleplayer' | 'multiplayer'): void {
  canvas = document.getElementById('pongCanvas') as HTMLCanvasElement;
  if (!canvas) return;
  ctx = canvas.getContext('2d')!;
  gameMode = mode;
  player1 = { x: 10, y: canvas.height / 2 - PADDLE_HEIGHT / 2, width: PADDLE_WIDTH, height: PADDLE_HEIGHT, score: 0 };
  player2 = { x: canvas.width - PADDLE_WIDTH - 10, y: canvas.height / 2 - PADDLE_HEIGHT / 2, width: PADDLE_WIDTH, height: PADDLE_HEIGHT, score: 0 };
  resetBall();
  document.addEventListener('keydown', keyDownHandler);
  document.addEventListener('keyup', keyUpHandler);
  gameLoop();
}

export function stopPongGame(): void {
  if (animationFrameId) {
    cancelAnimationFrame(animationFrameId);
    animationFrameId = null;
    document.removeEventListener('keydown', keyDownHandler);
    document.removeEventListener('keyup', keyUpHandler);
  }
}

function gameLoop(): void {
  update();
  draw();
  animationFrameId = requestAnimationFrame(gameLoop);
}

function update(): void {
  ball.x += ball.speedX;
  ball.y += ball.speedY;
  if (ball.y - ball.radius < 0 || ball.y + ball.radius > canvas.height) ball.speedY *= -1;
  if (ball.x - ball.radius < 0) {
    player2.score++;
    resetBall();
  } else if (ball.x + ball.radius > canvas.width) {
    player1.score++;
    resetBall();
  }
  const player = (ball.x < canvas.width / 2) ? player1 : player2;
  if (collides(ball, player)) {
    const collidePoint = (ball.y - (player.y + player.height / 2)) / (player.height / 2);
    const angleRad = (Math.PI / 4) * collidePoint;
    const direction = (ball.x < canvas.width / 2) ? 1 : -1;
    ball.speedX = direction * 7 * Math.cos(angleRad);
    ball.speedY = 7 * Math.sin(angleRad);
  }
  if (keys['w'] && player1.y > 0) player1.y -= PADDLE_SPEED;
  if (keys['s'] && player1.y < canvas.height - player1.height) player1.y += PADDLE_SPEED;
  if (gameMode === 'multiplayer') {
    if (keys['ArrowUp'] && player2.y > 0) player2.y -= PADDLE_SPEED;
    if (keys['ArrowDown'] && player2.y < canvas.height - player2.height) player2.y += PADDLE_SPEED;
  } else {
    const targetY = ball.y - player2.height / 2;
    if (player2.y < targetY && player2.y < canvas.height - player2.height) player2.y += AI_SPEED;
    if (player2.y > targetY && player2.y > 0) player2.y -= AI_SPEED;
  }
}

function draw(): void {
  ctx.fillStyle = '#000';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  ctx.strokeStyle = '#fff';
  ctx.setLineDash([10, 10]);
  ctx.beginPath();
  ctx.moveTo(canvas.width / 2, 0);
  ctx.lineTo(canvas.width / 2, canvas.height);
  ctx.stroke();
  ctx.setLineDash([]);
  ctx.fillStyle = '#fff';
  ctx.font = '45px "Press Start 2P"';
  ctx.fillText(player1.score.toString(), canvas.width / 4, 60);
  ctx.fillText(player2.score.toString(), 3 * canvas.width / 4, 60);
  ctx.fillRect(player1.x, player1.y, player1.width, player1.height);
  ctx.fillRect(player2.x, player2.y, player2.width, player2.height);
  ctx.beginPath();
  ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
  ctx.fill();
}

function collides(b: Ball, p: Paddle): boolean {
  return b.x - b.radius < p.x + p.width && b.x + b.radius > p.x &&
         b.y - b.radius < p.y + p.height && b.y + b.radius > p.y;
}

function resetBall(): void {
  ball = {
    x: canvas.width / 2, y: canvas.height / 2, radius: BALL_RADIUS,
    speedX: (Math.random() > 0.5 ? 1 : -1) * 5,
    speedY: (Math.random() * 6 - 3)
  };
}

==> frontend/src/rps/game.ts <==
type Choice = 'rock' | 'paper' | 'scissors';
type Outcome = 'win' | 'lose' | 'draw';

const choices: Choice[] = ['rock', 'paper', 'scissors'];
const winRules: Record<Choice, Choice> = {
  rock: 'scissors', paper: 'rock', scissors: 'paper',
};
const choiceEmojis: Record<Choice, string> = {
  rock: 'üóø', paper: 'üìÑ', scissors: '‚úÇÔ∏è',
};

let playerScore = 0;
let computerScore = 0;

let playerScoreEl: HTMLSpanElement, computerScoreEl: HTMLSpanElement, resultTextEl: HTMLParagraphElement, choicesDisplayEl: HTMLDivElement;

function getComputerChoice(): Choice {
  return choices[Math.floor(Math.random() * choices.length)];
}

function updateScore(outcome: Outcome) {
  if (outcome === 'win') {
    playerScore++;
    resultTextEl.textContent = 'Ganhou!';
    resultTextEl.className = 'text-2xl font-semibold h-8 mt-2 text-green-400';
  } else if (outcome === 'lose') {
    computerScore++;
    resultTextEl.textContent = 'Perdeu!';
    resultTextEl.className = 'text-2xl font-semibold h-8 mt-2 text-red-400';
  } else {
    resultTextEl.textContent = 'Empate!';
    resultTextEl.className = 'text-2xl font-semibold h-8 mt-2 text-gray-400';
  }
  playerScoreEl.textContent = playerScore.toString();
  computerScoreEl.textContent = computerScore.toString();
}

function handlePlayerChoice(event: Event) {
  const target = event.currentTarget as HTMLButtonElement;
  const playerChoice = target.dataset.choice as Choice;
  const computerChoice = getComputerChoice();
  const outcome = (playerChoice === computerChoice) ? 'draw' : (winRules[playerChoice] === computerChoice ? 'win' : 'lose');
  
  choicesDisplayEl.innerHTML = `Voc√™: <span class="text-2xl">${choiceEmojis[playerChoice]}</span> vs CPU: <span class="text-2xl">${choiceEmojis[computerChoice]}</span>`;
  updateScore(outcome);
}

export function initRpsGame() {
  playerScore = 0;
  computerScore = 0;
  
  playerScoreEl = document.getElementById('player-score') as HTMLSpanElement;
  computerScoreEl = document.getElementById('computer-score') as HTMLSpanElement;
  resultTextEl = document.getElementById('result-text') as HTMLParagraphElement;
  choicesDisplayEl = document.getElementById('choices-display') as HTMLDivElement;

  document.querySelectorAll('.choice-btn').forEach(button => {
    button.addEventListener('click', handlePlayerChoice);
  });
}
==> frontend/src/styles.css <==
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  .menu-button {
    @apply bg-gray-700 text-white font-press-start text-lg py-4 px-8 m-2 border-2 border-white rounded-lg cursor-pointer uppercase transition-all duration-200 hover:bg-indigo-600 hover:-translate-y-0.5 hover:shadow-retro-hover;
  }

  .text-glow {
    text-shadow: 0 0 10px #4f46e5, 0 0 20px #4f46e5;
  }
}
==> frontend/src/main.ts <==
import './styles.css';
import { initPongGame, stopPongGame } from './pong/game';
import { initRpsGame } from './rps/game';

const appContainer = document.getElementById('app') as HTMLDivElement;

const mainMenuView = `
  <div class="w-full relative">
    <div class="absolute top-0 right-0 p-4">
      <a href="/profile" class="text-white hover:text-indigo-400 transition-colors" data-navigate="/profile">Perfil</a>
    </div>
    <h1 class="text-5xl mb-8 text-glow">TRANSCENDENCE</h1>
    <div class="flex flex-col items-center">
      <button class="menu-button" data-navigate="/pong">Jogar Pong</button>
      <button class="menu-button" data-navigate="/rps">Pedra, Papel, Tesoura</button>
      <a href="/creators" class="mt-8 text-gray-400 hover:text-white transition-colors" data-navigate="/creators">Conhe√ßa nossos criadores!</a>
    </div>
  </div>
`;

const pongModeSelectionView = `
  <div>
    <h1 class="text-4xl mb-8 text-glow">PONG</h1>
    <p class="mb-4">Selecione o modo de jogo:</p>
    <button class="menu-button" data-navigate="/pong/singleplayer">Single Player</button>
    <button class="menu-button" data-navigate="/pong/multiplayer">Multiplayer</button>
    <br>
    <button class="menu-button mt-8" data-navigate="/">Voltar ao Menu</button>
  </div>
`;

const pongGameView = `
  <div>
    <p class="mb-2">P1: W/S | P2: ‚Üë/‚Üì</p>
    <canvas id="pongCanvas" width="800" height="600" class="bg-black border-4 border-white rounded-lg shadow-retro"></canvas>
    <br>
    <button class="menu-button" data-navigate="/">Voltar ao Menu</button>
  </div>
`;

const rpsView = `
  <div class="bg-slate-800 p-8 rounded-xl shadow-2xl w-full max-w-md text-center mx-auto">
    <h2 class="text-3xl font-bold mb-4 text-teal-400">Pedra, Papel & Tesoura</h2>
    <div class="flex justify-around items-center bg-slate-700 rounded-lg p-4 mb-6 text-lg">
      <div class="flex flex-col"><span class="font-bold text-2xl" id="player-score">0</span><span>Voc√™</span></div>
      <div class="font-bold text-2xl">:</div>
      <div class="flex flex-col"><span class="font-bold text-2xl" id="computer-score">0</span><span>CPU</span></div>
    </div>
    <div class="h-24 flex flex-col justify-center items-center mb-6">
        <div id="choices-display" class="text-xl h-8"></div>
        <p id="result-text" class="text-2xl font-semibold h-8 mt-2"></p>
    </div>
    <p class="mb-4 text-gray-300">Fa√ßa sua jogada:</p>
    <div class="flex justify-center gap-4">
        <button data-choice="rock" class="choice-btn bg-cyan-500 hover:bg-cyan-600 p-4 rounded-full text-4xl transition-transform duration-200 hover:scale-110">üóø</button>
        <button data-choice="paper" class="choice-btn bg-pink-500 hover:bg-pink-600 p-4 rounded-full text-4xl transition-transform duration-200 hover:scale-110">üìÑ</button>
        <button data-choice="scissors" class="choice-btn bg-yellow-500 hover:bg-yellow-600 p-4 rounded-full text-4xl transition-transform duration-200 hover:scale-110">‚úÇÔ∏è</button>
    </div>
    <div class="mt-8">
        <button class="menu-button" data-navigate="/">Voltar ao Menu</button>
    </div>
  </div>
`;

const profileView = `
  <div>
    <h1 class="text-4xl text-glow mb-8">Perfil</h1>
    <p>Informa√ß√µes b√°sicas do usu√°rio.</p>
    <button class="menu-button mt-8" data-navigate="/">Voltar ao Menu</button>
  </div>
`;

const creatorsView = `
  <div>
    <h1 class="text-4xl text-glow mb-8">Criadores</h1>
    <p>Este projeto foi criado por...</p>
    <button class="menu-button mt-8" data-navigate="/">Voltar ao Menu</button>
  </div>
`;

const routes: { [key: string]: string } = {
  '/': mainMenuView,
  '/pong': pongModeSelectionView,
  '/pong/singleplayer': pongGameView,
  '/pong/multiplayer': pongGameView,
  '/rps': rpsView,
  '/profile': profileView,
  '/creators': creatorsView,
};

function router(path: string) {
  stopPongGame();
  appContainer.innerHTML = routes[path] || `<h1>404 Not Found</h1><button class="menu-button" data-navigate="/">Voltar</button>`;
  if (path === '/pong/singleplayer') {
    initPongGame('singleplayer');
  } else if (path === '/pong/multiplayer') {
    initPongGame('multiplayer');
  } else if (path === '/rps') {
    initRpsGame();
  }
}

document.body.addEventListener('click', (e) => {
  const target = e.target as HTMLElement;
  const navLink = target.closest('[data-navigate]');
  if (navLink) {
    e.preventDefault();
    const path = navLink.getAttribute('data-navigate')!;
    history.pushState({}, '', path);
    router(path);
  }
});

window.addEventListener('popstate', () => {
  router(window.location.pathname);
});

router(window.location.pathname);

==> frontend/.postcssrc.js <==
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
==> frontend/nginx.conf <==
server {
    listen 80;
    root /usr/share/nginx/html;
    index index.html;

    location / {
        try_files $uri $uri/ /index.html;
    }
}
==> frontend/Dockerfile <==
#Buildar
FROM node:18-alpine AS builder
WORKDIR /app
COPY frontend/package*.json ./
RUN npm install
COPY frontend/ ./
RUN npm run build

# Roda a aplica√ß√£o com NGINX
FROM nginx:1.27-alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY frontend/nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
==> frontend/index.html <==
<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Transcendence</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap"
      rel="stylesheet"
    />
  </head>
  <body class="bg-gray-900 text-white font-press-start flex items-center justify-center min-h-screen">
    <div id="app" class="text-center w-full max-w-4xl mx-auto">
      </div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>
==> backend/package.json <==
{
  "name": "pong-backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.19.2"
  }
}

==> backend/server.js <==
const express = require('express');
const app = express();
const PORT = 3000;

app.get('/', (req, res) => {
  res.send('Rodando!');
});

app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', time: new Date() });
});

app.listen(PORT, () => {
  console.log(`Porta: ${PORT}`);
});

==> backend/Dockerfile <==
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 3000

CMD ["nodemon", "server.js"]

==> Makefile <==
FRONT_DIR := ./frontend
BACK_DIR  := ./backend
COMPOSE_FILE := docker-compose.yml

.PHONY: all build up stop start restart rm rmi rm-all ps

all: build up

build:
	@docker compose -f $(COMPOSE_FILE) build

up:
	@docker compose -f $(COMPOSE_FILE) up -d

stop:
	@docker compose -f $(COMPOSE_FILE) stop

start:
	@docker compose -f $(COMPOSE_FILE) start

restart:
	@docker compose -f $(COMPOSE_FILE) restart

rm:
	@docker compose -f $(COMPOSE_FILE) rm -f

rmi:
	@docker rmi -f $(shell docker images -q)

rm-all:
	@read -p "Essa bomba vai apagar TODOS os containers, tem certeza? [y/n] " ans; \
	if [ "$$ans" = "y" ] || [ "$$ans" = "Y" ]; then \
		docker stop $$(docker ps -q); \
		docker rm $$(docker ps -aq); \
	else \
		echo "cancelado"; \
	fi

ps:
	@docker compose -f $(COMPOSE_FILE) ps
