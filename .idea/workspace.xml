<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="6d3134b4-a67d-4c46-80e3-654566a805b8" name="Changes" comment="feat: add `TokenBlacklistService` and integrate Redis dependency&#10;&#10;- Created `TokenBlacklistService` for managing blacklisted JWT tokens.&#10;- Added Redis client as a dependency for handling token storage.&#10;- Updated `package.json` to include `redis` dependency.">
      <change afterPath="$PROJECT_DIR$/user-service/src/Presentation/Middleware/JWTPayload.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/auth-service/package-lock.json" beforeDir="false" afterPath="$PROJECT_DIR$/auth-service/package-lock.json" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/auth-service/package.json" beforeDir="false" afterPath="$PROJECT_DIR$/auth-service/package.json" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/game-service/src/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/game-service/src/index.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/user-service/package-lock.json" beforeDir="false" afterPath="$PROJECT_DIR$/user-service/package-lock.json" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/user-service/package.json" beforeDir="false" afterPath="$PROJECT_DIR$/user-service/package.json" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/user-service/src/Application/Services/Concrete/CreateUserService.ts" beforeDir="false" afterPath="$PROJECT_DIR$/user-service/src/Application/Services/Concrete/CreateUserService.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/user-service/src/Application/Services/Concrete/LoginUserService.ts" beforeDir="false" afterPath="$PROJECT_DIR$/user-service/src/Application/Services/Concrete/LoginUserService.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/user-service/src/Application/Services/Concrete/LogoutUserService.ts" beforeDir="false" afterPath="$PROJECT_DIR$/user-service/src/Application/Services/Concrete/LogoutUserService.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/user-service/src/Application/Services/Concrete/TokenBlacklistService.ts" beforeDir="false" afterPath="$PROJECT_DIR$/user-service/src/Application/Services/Concrete/TokenBlacklistService.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/user-service/src/Presentation/Controllers/UserSessionController.ts" beforeDir="false" afterPath="$PROJECT_DIR$/user-service/src/Presentation/Controllers/UserSessionController.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/user-service/src/Presentation/Middleware/AuthMiddleware.ts" beforeDir="false" afterPath="$PROJECT_DIR$/user-service/src/Presentation/Middleware/AuthMiddleware.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/user-service/src/Presentation/Routes/UserSessionRoutes/UserSessionRoutes.ts" beforeDir="false" afterPath="$PROJECT_DIR$/user-service/src/Presentation/Routes/UserSessionRoutes/UserSessionRoutes.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/user-service/src/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/user-service/src/index.ts" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Dockerfile" />
        <option value="package.json" />
        <option value="TypeScript File" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="feature/new-trans" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;bonissanti&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/ArthurSobreira/42_transcendence.git&quot;,
    &quot;accountId&quot;: &quot;de286582-ad2a-4790-b6a2-7f4817dd9ce3&quot;
  }
}</component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="ProjectErrors" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 1
}</component>
  <component name="ProjectId" id="2zmKcedwfHZtt7z3RJYxcKbTeVN" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Docker.tournament: Compose Deployment.executor": "Run",
    "HTTP Request.All in rest-api_10.executor": "Run",
    "HTTP Request.http-requests-log | #1.executor": "Run",
    "HTTP Request.http-requests-log | #6.executor": "Run",
    "HTTP Request.http-requests-log | #7.executor": "Run",
    "HTTP Request.http-requests-log | #8.executor": "Run",
    "HTTP Request.rest-api_10 | #1.executor": "Run",
    "HTTP Request.rest-api_11 | #1.executor": "Run",
    "HTTP Request.rest-api_9 | #1.executor": "Run",
    "JavaScript Debug.127.0.0.1:8080.executor": "Debug",
    "JavaScript Debug.127.0.0.1:8081.executor": "Debug",
    "ModuleVcsDetector.initialDetectionPerformed": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager": "true",
    "RunOnceActivity.git.unshallow": "true",
    "git-widget-placeholder": "fix/login-logout",
    "junie.onboarding.icon.badge.shown": "true",
    "last_opened_file_path": "/home/bruno/Documents/42SP/42_transcendence/tournament/src/Application/Queries/Handlers",
    "node.js.detected.package.eslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "npm.build.executor": "Run",
    "npm.clean:dist.executor": "Run",
    "npm.start (1).executor": "Run",
    "npm.start.executor": "Debug",
    "settings.editor.selected.configurable": "preferences.pluginManager",
    "ts.external.directory.path": "/home/bruno/Documents/42SP/42_transcendence/user-service/node_modules/typescript/lib"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/tournament/src/Application/Queries/Handlers" />
      <recent name="$PROJECT_DIR$/tournament/src/Application/DTO/ToQuery" />
      <recent name="$PROJECT_DIR$/tournament/src/Application/Services/Concrete" />
      <recent name="$PROJECT_DIR$/tournament/src/Domain/DTO/Command" />
      <recent name="$PROJECT_DIR$/tournament/src/Presentation/Controllers" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/user-service/src/Domain" />
      <recent name="$PROJECT_DIR$/user-service/src/Application" />
      <recent name="$PROJECT_DIR$/devops" />
      <recent name="$PROJECT_DIR$/tournament/src/Domain/Queries/QueryObject" />
      <recent name="$PROJECT_DIR$/tournament/src/Domain/Command/Handlers" />
    </key>
  </component>
  <component name="RunManager" selected="npm.start">
    <configuration name="http-requests-log | #1" type="HttpClient.HttpRequestRunConfigurationType" factoryName="HTTP Request" temporary="true" nameIsGenerated="true" path="$PROJECT_DIR$/.idea/httpRequests/http-requests-log.http" executionIdentifier="#1" runType="Run single request">
      <method v="2" />
    </configuration>
    <configuration name="http-requests-log | #6" type="HttpClient.HttpRequestRunConfigurationType" factoryName="HTTP Request" temporary="true" nameIsGenerated="true" path="$PROJECT_DIR$/.idea/httpRequests/http-requests-log.http" executionIdentifier="#6" index="6" runType="Run single request">
      <method v="2" />
    </configuration>
    <configuration name="http-requests-log | #8" type="HttpClient.HttpRequestRunConfigurationType" factoryName="HTTP Request" temporary="true" nameIsGenerated="true" path="$PROJECT_DIR$/.idea/httpRequests/http-requests-log.http" executionIdentifier="#8" index="8" runType="Run single request">
      <method v="2" />
    </configuration>
    <configuration name="rest-api_11 | #1" type="HttpClient.HttpRequestRunConfigurationType" factoryName="HTTP Request" temporary="true" nameIsGenerated="true" path="$APPLICATION_CONFIG_DIR$/scratches/rest-api_11.http" executionIdentifier="#1" runType="Run single request">
      <method v="2" />
    </configuration>
    <configuration name="127.0.0.1:8081" type="JavascriptDebugType" temporary="true" nameIsGenerated="true" uri="http://127.0.0.1:8081">
      <method v="2" />
    </configuration>
    <configuration default="true" type="docker-deploy" factoryName="docker-compose.yml" temporary="true">
      <deployment type="docker-compose.yml">
        <settings />
      </deployment>
      <method v="2" />
    </configuration>
    <configuration name="start" type="js.build_tools.npm" nameIsGenerated="true">
      <package-json value="$PROJECT_DIR$/tournament/package.json" />
      <command value="start" />
      <node-interpreter value="project" />
      <envs />
      <method v="2" />
    </configuration>
    <configuration name="start" type="js.build_tools.npm" temporary="true" nameIsGenerated="true">
      <package-json value="$PROJECT_DIR$/tournament/package.json" />
      <command value="run" />
      <scripts>
        <script value="start" />
      </scripts>
      <node-interpreter value="project" />
      <envs />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="HTTP Request.http-requests-log | #1" />
      <item itemvalue="HTTP Request.http-requests-log | #6" />
      <item itemvalue="HTTP Request.http-requests-log | #8" />
      <item itemvalue="HTTP Request.rest-api_11 | #1" />
      <item itemvalue="JavaScript Debug.127.0.0.1:8081" />
      <item itemvalue="npm.start" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="JavaScript Debug.127.0.0.1:8081" />
        <item itemvalue="HTTP Request.rest-api_11 | #1" />
        <item itemvalue="HTTP Request.http-requests-log | #8" />
        <item itemvalue="HTTP Request.http-requests-log | #6" />
        <item itemvalue="HTTP Request.http-requests-log | #1" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-js-predefined-d6986cc7102b-09060db00ec0-JavaScript-WS-251.26927.40" />
      </set>
    </attachedChunks>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="6d3134b4-a67d-4c46-80e3-654566a805b8" name="Changes" comment="" />
      <created>1752330888248</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1752330888248</updated>
      <workItem from="1752330889369" duration="4328000" />
      <workItem from="1752335230569" duration="2175000" />
      <workItem from="1752342442241" duration="1755000" />
      <workItem from="1752344203319" duration="11126000" />
      <workItem from="1752355352918" duration="731000" />
      <workItem from="1752356104739" duration="4274000" />
      <workItem from="1752529945400" duration="5257000" />
      <workItem from="1752535229586" duration="790000" />
      <workItem from="1752536105787" duration="659000" />
      <workItem from="1752536928505" duration="86000" />
      <workItem from="1752537118401" duration="535000" />
      <workItem from="1752539480256" duration="287000" />
      <workItem from="1752622489377" duration="1208000" />
      <workItem from="1752623711391" duration="2314000" />
      <workItem from="1752626039489" duration="3372000" />
      <workItem from="1752701419694" duration="8696000" />
      <workItem from="1752793555871" duration="8203000" />
      <workItem from="1752936359530" duration="928000" />
      <workItem from="1752937299761" duration="2991000" />
      <workItem from="1752944155456" duration="34000" />
      <workItem from="1752945751687" duration="1427000" />
      <workItem from="1752953037175" duration="4719000" />
      <workItem from="1752957795072" duration="1303000" />
      <workItem from="1753043060074" duration="4990000" />
      <workItem from="1753220205206" duration="8131000" />
    </task>
    <task id="LOCAL-00011" summary="feat: add validators and DTOs for tournament module commands  &#10;&#10;- Implemented `CreateTournamentDTO` and `DeleteTournamentDTO` for handling respective command data.  &#10;- Added `CreateTournamentValidator` and `DeleteUserCommandValidator` for validating tournament and user commands.  &#10;- Introduced `DeleteUserCommandHandler` to handle user deletion logic via repository.">
      <option name="closed" value="true" />
      <created>1752353230365</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1752353230365</updated>
    </task>
    <task id="LOCAL-00012" summary="feat: add query handlers, DTOs, and validators for `GetUser` and `GetTournament` operations&#10;&#10;- Implemented `GetUserQueryHandler` and `GetTournamentQueryDTO` for handling user and tournament queries.&#10;- Added `GetUserQueryValidator` for input validation of user queries.&#10;- Introduced supporting DTOs and query objects for tournament and user processing.">
      <option name="closed" value="true" />
      <created>1752353261970</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1752353261970</updated>
    </task>
    <task id="LOCAL-00013" summary="feat: implement session command handlers and validators for login and logout actions&#10;&#10;- Added `LoginSessionCommandHandler` and `LogoutSessionCommandHandler` for handling login/logout operations.&#10;- Implemented validators `LoginSessionCommandValidator` and `LogoutSessionCommandValidator` with comprehensive validation logic.&#10;- Integrated repository and error notification for user existence and credential checks.">
      <option name="closed" value="true" />
      <created>1752353280002</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1752353280002</updated>
    </task>
    <task id="LOCAL-00014" summary="feat: add unique `tournamentUuid` column and comment out PrismaService initialization&#10;&#10;- Added `tournamentUuid` column with unique constraint to `Tournament` model for better identification.&#10;- Commented out PrismaService initialization in preparation for potential refactoring or alternative implementation.">
      <option name="closed" value="true" />
      <created>1752353290701</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1752353290701</updated>
    </task>
    <task id="LOCAL-00015" summary="feat: implement tournament command handlers, validators, and services&#10;&#10;- Added `CreateTournamentCommandHandler`, `EditTournamentCommandHandler`, and `DeleteTournamentCommandHandler` for tournament operations.&#10;- Implemented `EditTournamentCommandValidator` and `DeleteTournamentCommandValidator` for validation.&#10;- Created services: `CreateTournamentService`, `EditTournamentService`, and `DeleteTournamentService` to handle logic and execution flow. &#10;- Enhanced `BaseHandlerQuery` to support result typing.&#10;- Introduced DTOs and command objects for tournament operations.">
      <option name="closed" value="true" />
      <created>1752358575693</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1752358575694</updated>
    </task>
    <task id="LOCAL-00016" summary="feat: implement query handlers, DTOs, and services for `GetAllTournaments` and improve existing tournament query operations&#10;&#10;- Added `GetAllTournamentQueryHandler` to handle all tournaments query logic.&#10;- Implemented new DTOs: `GetAllTournamentsDTO`, `GetAllTournamentsQueryDTO`, and `GetAllTournamentsViewModel`.&#10;- Created `GetAllTournamentService` to manage query execution and result transformation.&#10;- Enhanced existing `GetTournamentQuery` with `fromDTO` method and resolved typos in `GetTournamentDTO`. &#10;- Refactored `GetUserQueryHandler` to `GetTournamentQueryHandler` and updated corresponding methods and repositories.">
      <option name="closed" value="true" />
      <created>1752358588093</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1752358588093</updated>
    </task>
    <task id="LOCAL-00017" summary="refactor: replace session commands with tournament-based operations and refactor structure&#10;&#10;- Removed `LoginSessionCommandHandler`, `LogoutSessionCommandHandler`, and related validators.&#10;- Added `TournamentController` with methods for managing tournament operations.&#10;- Introduced `TournamentRepository` and `Tournament` entity to handle tournament persistence and data transformation.&#10;- Updated `GetUserQueryValidator` to reference tournaments instead of users.&#10;- Simplified workspace configuration and adjusted file paths for consistency.">
      <option name="closed" value="true" />
      <created>1752358596569</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1752358596569</updated>
    </task>
    <task id="LOCAL-00018" summary="feat: add `tournament` service to docker-compose and refactor tournament services&#10;&#10;- Added `tournament` service configuration, including environment variables, ports, and volumes.&#10;- Adjusted `EditTournamentCommand` to require all player UUIDs as non-optional.&#10;- Refactored `CreateTournamentService` and `DeleteTournamentService` to instantiate `TournamentRepository` internally instead of passing it as a parameter.&#10;- Fixed missing newline in `BaseEntity` interface.">
      <option name="closed" value="true" />
      <created>1752535761963</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1752535761963</updated>
    </task>
    <task id="LOCAL-00019" summary="refactor: make player UUIDs in `EditTournamentDTO` required and adjust internal repository instantiation&#10;&#10;- Updated `EditTournamentDTO` to require `player3Uuid` and `player4Uuid` as mandatory fields.&#10;- Modified `GetAllTournamentService` and `EditTournamentService` to internally instantiate `TournamentRepository`.&#10;- Improved type safety in `EditTournamentCommandHandler` by removing nullable checks for `ChangeFields` method arguments.">
      <option name="closed" value="true" />
      <created>1752535772895</created>
      <option name="number" value="00019" />
      <option name="presentableId" value="LOCAL-00019" />
      <option name="project" value="LOCAL" />
      <updated>1752535772895</updated>
    </task>
    <task id="LOCAL-00020" summary="refactor: replace user-related logic with tournament operations and instantiate repository internally&#10;&#10;- Updated `GetUserQueryValidator` to handle `GetTournamentQuery` and `DeleteTournamentCommand` instead of user operations.&#10;- Removed user-related DTOs, entities, and types from `IBaseRepository`.&#10;- Internally instantiated `TournamentRepository` in `GetTournamentService` constructor for consistency.&#10;- Added new entry point `index.ts` to initialize server with `fastify` and configure tournament routes.&#10;- Upgraded `@prisma/client` and `prisma` dependencies to latest versions.">
      <option name="closed" value="true" />
      <created>1752535781434</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1752535781434</updated>
    </task>
    <task id="LOCAL-00021" summary="feat: initialize core tournament services, enhance DTOs, and update schema&#10;&#10;- Added services: `EditTournamentService`, `DeleteTournamentService`, `GetTournamentService`, and `GetAllTournamentService` with internal repository instantiation.&#10;- Enhanced `TournamentController` methods to handle query parameters and corrected DTO instantiations.&#10;- Updated `Tournament` entity to include `tournamentUuid` generation via `crypto.randomUUID`.&#10;- Modified Prisma schema: changed database file name, adjusted field constraints, and added `PrismaService`.">
      <option name="closed" value="true" />
      <created>1752535795614</created>
      <option name="number" value="00021" />
      <option name="presentableId" value="LOCAL-00021" />
      <option name="project" value="LOCAL" />
      <updated>1752535795614</updated>
    </task>
    <task id="LOCAL-00022" summary="feat: setup TypeScript config and refactor TournamentRepository for unified Prisma access&#10;&#10;- Added `tsconfig.json` with standardized compiler options.&#10;- Removed redundant `PrismaClient` instantiation. TournamentRepository now uses a shared `PrismaService` (`@prisma`) for database operations.&#10;- Adjusted method calls in `TournamentRepository` to align with updated structure.&#10;- Added `TournamentRoutes` to configure endpoints for tournament operations.">
      <option name="closed" value="true" />
      <created>1752535802718</created>
      <option name="number" value="00022" />
      <option name="presentableId" value="LOCAL-00022" />
      <option name="project" value="LOCAL" />
      <updated>1752535802718</updated>
    </task>
    <task id="LOCAL-00023" summary="refactor: update `BackendApiClient` request structure, error handling, and enhance `Dockerfile` installation&#10;&#10;- Refactored `BackendApiClient` to use query parameters for `verifyUserExists` and updated related typings.&#10;- Adjusted error mappings in `CreateTournamentValidator` for internal backend API errors.&#10;- Enhanced `Dockerfile` to include registry-specific npm installation with optional dependencies disabled.&#10;- Revised `BaseHandlerQuery` interface to support distinct command and result types.">
      <option name="closed" value="true" />
      <created>1752629104414</created>
      <option name="number" value="00023" />
      <option name="presentableId" value="LOCAL-00023" />
      <option name="project" value="LOCAL" />
      <updated>1752629104414</updated>
    </task>
    <task id="LOCAL-00024" summary="feat: add `InternalBackendApiError`, update `GetUserQuery` and related services&#10;&#10;- Introduced new error type `InternalBackendApiError` in `ErrorCatalog` for backend communication issues.&#10;- Made `Email` and `Username` optional in `GetUserQuery` and adjusted its constructor for better flexibility.&#10;- Updated `GetUserService` to reflect changes in query and handle nullable fields seamlessly.">
      <option name="closed" value="true" />
      <created>1752629116280</created>
      <option name="number" value="00024" />
      <option name="presentableId" value="LOCAL-00024" />
      <option name="project" value="LOCAL" />
      <updated>1752629116280</updated>
    </task>
    <task id="LOCAL-00025" summary="feat: add `InternalBackendApiError`, update `GetUserQuery` and related services&#10;&#10;- Introduced new error type `InternalBackendApiError` in `ErrorCatalog` for backend communication issues.&#10;- Made `Email` and `Username` optional in `GetUserQuery` and adjusted its constructor for better flexibility.&#10;- Updated `GetUserService` to reflect changes in query and handle nullable fields seamlessly.">
      <option name="closed" value="true" />
      <created>1752629123566</created>
      <option name="number" value="00025" />
      <option name="presentableId" value="LOCAL-00025" />
      <option name="project" value="LOCAL" />
      <updated>1752629123567</updated>
    </task>
    <task id="LOCAL-00026" summary="feat: add user existence verification via UUIDs endpoint&#10;&#10;- Introduced `/user/exists` GET route to verify user existence by UUIDs with input validation.&#10;- Added `VerifyIfUsersExistsByUuidsDTO` and `VerificationService` for handling new functionality.&#10;- Updated `UserRepository` with methods to validate user existence by UUID or username arrays.">
      <option name="closed" value="true" />
      <created>1752629156569</created>
      <option name="number" value="00026" />
      <option name="presentableId" value="LOCAL-00026" />
      <option name="project" value="LOCAL" />
      <updated>1752629156569</updated>
    </task>
    <task id="LOCAL-00027" summary="feat: add `VerificationService`, `VerifyIfUsersExistsByUuidsDTO`, and update paths in tsconfig&#10;&#10;- Introduced `VerificationService` to handle user existence verification logic.&#10;- Added `VerifyIfUsersExistsByUuidsDTO` for querying user existence by UUIDs.&#10;- Updated TypeScript configuration paths to ensure proper module resolution.">
      <option name="closed" value="true" />
      <created>1752629165467</created>
      <option name="number" value="00027" />
      <option name="presentableId" value="LOCAL-00027" />
      <option name="project" value="LOCAL" />
      <updated>1752629165467</updated>
    </task>
    <task id="LOCAL-00028" summary="feat: add `VerificationService`, `VerifyIfUsersExistsByUuidsDTO`, and update paths in tsconfig&#10;&#10;- Introduced `VerificationService` to handle user existence verification logic.&#10;- Added `VerifyIfUsersExistsByUuidsDTO` for querying user existence by UUIDs.&#10;- Updated TypeScript configuration paths to ensure proper module resolution.">
      <option name="closed" value="true" />
      <created>1752629170866</created>
      <option name="number" value="00028" />
      <option name="presentableId" value="LOCAL-00028" />
      <option name="project" value="LOCAL" />
      <updated>1752629170866</updated>
    </task>
    <task id="LOCAL-00029" summary="refactor: relocate query/command handlers and update import statements&#10;&#10;- Moved `BaseHandlerQuery` and `BaseHandlerCommand` from `Application` to `Domain` layer.&#10;- Updated `NotificationError` imports to remove `.js` extensions for consistency.">
      <option name="closed" value="true" />
      <created>1752706847912</created>
      <option name="number" value="00029" />
      <option name="presentableId" value="LOCAL-00029" />
      <option name="project" value="LOCAL" />
      <updated>1752706847912</updated>
    </task>
    <task id="LOCAL-00030" summary="feat: implement `CreateHistory` command handling with validation and repository integration&#10;&#10;- Added `CreateHistoryCommandHandler` for processing `CreateHistoryCommand`.&#10;- Introduced `CreateHistoryDTO` and related `fromDTO` conversion method.&#10;- Created `CreateHistoryValidator` to validate command inputs and ensure user existence via `BackendApiClient`.&#10;- Updated relevant import paths and repository logic for new functionality.">
      <option name="closed" value="true" />
      <created>1752706859695</created>
      <option name="number" value="00030" />
      <option name="presentableId" value="LOCAL-00030" />
      <option name="project" value="LOCAL" />
      <updated>1752706859695</updated>
    </task>
    <task id="LOCAL-00031" summary="refactor: relocate tournament commands/handlers/validators to `Domain` layer and update imports  &#10;&#10;- Moved `CreateTournamentValidator`, `DeleteTournamentCommand`, `CreateTournamentCommand`, and related handlers to the `Domain` layer.  &#10;- Updated import paths throughout the affected files for consistency.  &#10;- Adjusted error handling in `CreateTournamentValidator` to use `InternalBackendApiErrorVerifyUserExists`.">
      <option name="closed" value="true" />
      <created>1752706870516</created>
      <option name="number" value="00031" />
      <option name="presentableId" value="LOCAL-00031" />
      <option name="project" value="LOCAL" />
      <updated>1752706870516</updated>
    </task>
    <task id="LOCAL-00032" summary="refactor: relocate `EditTournament` and `DeleteTournament` commands/handlers/validators to `Domain` layer&#10;&#10;- Moved `EditTournamentCommand`, `EditTournamentCommandHandler`, `EditTournamentCommandValidator`, `DeleteTournamentCommand`, `DeleteUserCommandValidator`, and their handlers to the `Domain` layer.&#10;- Updated import paths across affected files for consistency and alignment with project structure.">
      <option name="closed" value="true" />
      <created>1752706883809</created>
      <option name="number" value="00032" />
      <option name="presentableId" value="LOCAL-00032" />
      <option name="project" value="LOCAL" />
      <updated>1752706883809</updated>
    </task>
    <task id="LOCAL-00033" summary="feat: add new errors to `ErrorCatalog` and enhance `GetAllTournamentQueryHandler`&#10;&#10;- Added `InvalidNumberOfParticipantsHistory` and `HistoryNotFound` errors in `ErrorCatalog`.&#10;- Updated `InternalBackendApiError` message for `verifyUserExists` endpoint.&#10;- Introduced `GetAllHistoryDTO` for handling username-based query logic.&#10;- Adjusted import paths in `GetAllTournamentQueryHandler` for consistency.">
      <option name="closed" value="true" />
      <created>1752706895954</created>
      <option name="number" value="00033" />
      <option name="presentableId" value="LOCAL-00033" />
      <option name="project" value="LOCAL" />
      <updated>1752706895954</updated>
    </task>
    <task id="LOCAL-00034" summary="refactor: relocate query objects to `Domain` layer and update imports&#10;&#10;- Moved `GetAllTournamentsQuery`, `GetTournamentQuery`, and other query objects to `Domain` layer.&#10;- Added `GetHistoryQuery` for handling username-based query logic.&#10;- Updated import paths across affected files for consistency.">
      <option name="closed" value="true" />
      <created>1752706904784</created>
      <option name="number" value="00034" />
      <option name="presentableId" value="LOCAL-00034" />
      <option name="project" value="LOCAL" />
      <updated>1752706904784</updated>
    </task>
    <task id="LOCAL-00035" summary="refactor: relocate query handlers, validators to `Domain`, add `History` entity and update imports&#10;&#10;- Moved `GetTournamentQueryHandler`, `GetUserQueryValidator`, and related logic to `Domain` layer.  &#10;- Added `History` entity for managing tournament history details.  &#10;- Updated import paths across affected modules for consistency.">
      <option name="closed" value="true" />
      <created>1752706914906</created>
      <option name="number" value="00035" />
      <option name="presentableId" value="LOCAL-00035" />
      <option name="project" value="LOCAL" />
      <updated>1752706914906</updated>
    </task>
    <task id="LOCAL-00036" summary="feat: implement `HistoryService` with `Create` method, add `History` and `MatchMaking` models to Prisma schema&#10;&#10;- Introduced `HistoryService` to manage tournament history creation and processing.&#10;- Added `History` and `MatchMaking` models to `tournament.prisma` schema for tracking matches and histories.&#10;- Updated `backend.prisma` schema formatting for consistency.">
      <option name="closed" value="true" />
      <created>1752706923764</created>
      <option name="number" value="00036" />
      <option name="presentableId" value="LOCAL-00036" />
      <option name="project" value="LOCAL" />
      <updated>1752706923764</updated>
    </task>
    <task id="LOCAL-00037" summary="feat: add new errors to `ErrorCatalog` and update history validation logic&#10;&#10;- Added `PlayerCantPlayAgainstSelf` and `NegativePoints` errors to `ErrorCatalog` for enhanced validation.&#10;- Renamed `GetAllHistoryDTO` and `GetHistoryQuery` to `GetAllHistoriesDTO` and `GetAllHistoriesQuery`.&#10;- Updated `CreateHistoryValidator` to enforce validation for self-play and negative points.">
      <option name="closed" value="true" />
      <created>1752709258460</created>
      <option name="number" value="00037" />
      <option name="presentableId" value="LOCAL-00037" />
      <option name="project" value="LOCAL" />
      <updated>1752709258460</updated>
    </task>
    <task id="LOCAL-00038" summary="feat: add `GetAllHistoriesQueryHandler`, `GetAllHistoriesViewModel`, and DTO for history retrieval&#10;&#10;- Implemented `GetAllHistoriesQueryHandler` to handle history retrieval by username.&#10;- Added `GetAllHistoriesViewModel` for mapping DTO data to a user-friendly format.&#10;- Introduced `GetAllHistoriesQueryDTO` to structure history query data.&#10;- Updated `GetAllTournamentsDTO` to replace `userUuid` with `username`.">
      <option name="closed" value="true" />
      <created>1752709268079</created>
      <option name="number" value="00038" />
      <option name="presentableId" value="LOCAL-00038" />
      <option name="project" value="LOCAL" />
      <updated>1752709268079</updated>
    </task>
    <task id="LOCAL-00039" summary="feat: add `GetAllHistoriesQueryHandler`, `GetAllHistoriesViewModel`, and DTO for history retrieval&#10;&#10;- Implemented `GetAllHistoriesQueryHandler` to handle history retrieval by username.&#10;- Added `GetAllHistoriesViewModel` for mapping DTO data to a user-friendly format.&#10;- Introduced `GetAllHistoriesQueryDTO` to structure history query data.&#10;- Updated `GetAllTournamentsDTO` to replace `userUuid` with `username`.">
      <option name="closed" value="true" />
      <created>1752709276850</created>
      <option name="number" value="00039" />
      <option name="presentableId" value="LOCAL-00039" />
      <option name="project" value="LOCAL" />
      <updated>1752709276850</updated>
    </task>
    <task id="LOCAL-00040" summary="feat: implement `GetAllHistories` in `HistoryService` and update `GetAllTournamentsDTO`&#10;&#10;- Added `GetAll` method in `HistoryService` to retrieve tournament histories based on username.&#10;- Updated `GetAllTournamentsDTO` to replace `userUuid` with `username`.">
      <option name="closed" value="true" />
      <created>1752709285371</created>
      <option name="number" value="00040" />
      <option name="presentableId" value="LOCAL-00040" />
      <option name="project" value="LOCAL" />
      <updated>1752709285371</updated>
    </task>
    <task id="LOCAL-00041" summary="feat: implement `GetAllHistories` in `HistoryService` and update `GetAllTournamentsDTO`&#10;&#10;- Added `GetAll` method in `HistoryService` to retrieve tournament histories based on username.&#10;- Updated `GetAllTournamentsDTO` to replace `userUuid` with `username`.">
      <option name="closed" value="true" />
      <created>1752710073833</created>
      <option name="number" value="00041" />
      <option name="presentableId" value="LOCAL-00041" />
      <option name="project" value="LOCAL" />
      <updated>1752710073833</updated>
    </task>
    <task id="LOCAL-00042" summary="feat: integrate `BackendApiClient` for user validation and win/lose tracking&#10;&#10;- Added `BackendApiClient` to `CreateHistoryCommandHandler` for tracking user win/lose metrics.&#10;- Renamed methods in `BackendApiClient` for consistency (`verifyUserExists` to `VerifyIfUsersExists`).&#10;- Introduced `AddWinLoseForUser` method in `BackendApiClient`.&#10;- Updated validators to use the newly renamed methods.">
      <option name="closed" value="true" />
      <created>1752801401502</created>
      <option name="number" value="00042" />
      <option name="presentableId" value="LOCAL-00042" />
      <option name="project" value="LOCAL" />
      <updated>1752801401502</updated>
    </task>
    <task id="LOCAL-00043" summary="feat: add matchmaking-related DTOs, query objects, and new validation errors&#10;&#10;- Introduced `GenerateMatchmakingDTO`, `GenerateMatchmakingQuery`, and `GenerateMatchmakingQueryDTO` for matchmaking logic.&#10;- Added `NegativeWins` error to `ErrorCatalog` for validation of win values.&#10;- Updated `ErrorCatalog` messages for consistency in backend API error naming.">
      <option name="closed" value="true" />
      <created>1752801412750</created>
      <option name="number" value="00043" />
      <option name="presentableId" value="LOCAL-00043" />
      <option name="project" value="LOCAL" />
      <updated>1752801412750</updated>
    </task>
    <task id="LOCAL-00044" summary="refactor: rename method in `IBackendApiClient` and update logs for clarity&#10;&#10;- Renamed `verifyUserExists` to `VerifyIfUsersExists` in `IBackendApiClient` for consistency.&#10;- Enhanced error logging in `index.ts` for better debugging. &#10;- Minor formatting updates in `HistoryRepository`.">
      <option name="closed" value="true" />
      <created>1752801427669</created>
      <option name="number" value="00044" />
      <option name="presentableId" value="LOCAL-00044" />
      <option name="project" value="LOCAL" />
      <updated>1752801427669</updated>
    </task>
    <task id="LOCAL-00045" summary="feat: implement matchmaking controller, view model, and query handlers&#10;&#10;- Added `MatchmakingController` with matchmaking logic and integration via `GenerateMatchmakingDTO`.&#10;- Introduced `GenerateMatchmakingViewModel` to structure matchmaking data.&#10;- Implemented `GenerateMatchmakingQueryHandler` and `GenerateMatchmakingQueryValidator` for query processing and validation.">
      <option name="closed" value="true" />
      <created>1752801461053</created>
      <option name="number" value="00045" />
      <option name="presentableId" value="LOCAL-00045" />
      <option name="project" value="LOCAL" />
      <updated>1752801461053</updated>
    </task>
    <task id="LOCAL-00046" summary="feat: add matchmaking service, user search method, and update routes&#10;&#10;- Implemented `MatchmakingService` with preliminary `Generate` logic.&#10;- Added `SearchForClosestOpponent` method in `UserRepository` for matchmaking user search based on win ratio and matches played.&#10;- Updated `UserRoutes` with corrected endpoint `/users/exists`.&#10;- Extended `NotificationError` with `SetAllErrorsToString` method for better error handling.">
      <option name="closed" value="true" />
      <created>1752801469755</created>
      <option name="number" value="00046" />
      <option name="presentableId" value="LOCAL-00046" />
      <option name="project" value="LOCAL" />
      <updated>1752801469755</updated>
    </task>
    <task id="LOCAL-00047" summary="chore: add missing newline and leave TODO for additional validators&#10;&#10;- Fixed missing newline in `GenerateMatchmakingQueryValidator.ts`.&#10;- Added a TODO placeholder to include validators for additional getters.">
      <option name="closed" value="true" />
      <created>1752801608961</created>
      <option name="number" value="00047" />
      <option name="presentableId" value="LOCAL-00047" />
      <option name="project" value="LOCAL" />
      <updated>1752801608961</updated>
    </task>
    <task id="LOCAL-00048" summary="chore: add TODO placeholders for unimplemented methods in `BackendApiClient`">
      <option name="closed" value="true" />
      <created>1752801659903</created>
      <option name="number" value="00048" />
      <option name="presentableId" value="LOCAL-00048" />
      <option name="project" value="LOCAL" />
      <updated>1752801659903</updated>
    </task>
    <task id="LOCAL-00049" summary="feat: enhance matchmaking logic in `UserRepository` and add `GetUserMatchmakingQueryDTO`&#10;&#10;- Updated `SearchForClosestOpponent` to refine candidate selection based on win ratio differences.&#10;- Implemented a fallback `SearchForAnyOpponent` method for broader matchmaking.&#10;- Added `mapToUserMatchmakingQueryDTO` for structured matchmaking data mapping.&#10;- Introduced `GetUserMatchmakingQueryDTO` to support detailed matchmaking query responses.">
      <option name="closed" value="true" />
      <created>1752937454715</created>
      <option name="number" value="00049" />
      <option name="presentableId" value="LOCAL-00049" />
      <option name="project" value="LOCAL" />
      <updated>1752937454715</updated>
    </task>
    <task id="LOCAL-00050" summary="feat: update matchmaking DTOs and queries to support total games and username&#10;&#10;- Replaced `uuid` with `username` in `GenerateMatchmakingDTO` and `GenerateMatchmakingQuery`.&#10;- Added `totalGames` property to DTOs and queries for enhanced matchmaking logic.&#10;- Updated `BackendApiClient` with new methods for user verification and opponent search.&#10;- Added `NegativeValues` error to `ErrorCatalog` for input validation.">
      <option name="closed" value="true" />
      <created>1752940167757</created>
      <option name="number" value="00050" />
      <option name="presentableId" value="LOCAL-00050" />
      <option name="project" value="LOCAL" />
      <updated>1752940167758</updated>
    </task>
    <task id="LOCAL-00051" summary="refactor: replace `HistoryRepository` with `BackendApiClient` in `GenerateMatchmakingQueryHandler` and update validation&#10;&#10;- Updated `Handler` to use `BackendApiClient` for opponent search and user validation.&#10;- Extended input validation to include `totalGames` check.&#10;- Replaced `uuid` with `username` in user validation and opponent search methods.">
      <option name="closed" value="true" />
      <created>1752940175279</created>
      <option name="number" value="00051" />
      <option name="presentableId" value="LOCAL-00051" />
      <option name="project" value="LOCAL" />
      <updated>1752940175279</updated>
    </task>
    <task id="LOCAL-00052" summary="refactor: replace `HistoryRepository` with `BackendApiClient` in `GenerateMatchmakingQueryHandler` and update validation&#10;&#10;- Updated `Handler` to use `BackendApiClient` for opponent search and user validation.&#10;- Extended input validation to include `totalGames` check.&#10;- Replaced `uuid` with `username` in user validation and opponent search methods.">
      <option name="closed" value="true" />
      <created>1752940184527</created>
      <option name="number" value="00052" />
      <option name="presentableId" value="LOCAL-00052" />
      <option name="project" value="LOCAL" />
      <updated>1752940184527</updated>
    </task>
    <task id="LOCAL-00053" summary="refactor: simplify `SearchForClosestOpponent` and enhance `MatchmakingService`&#10;&#10;- Removed unnecessary `paremterLoses` parameter from `SearchForClosestOpponent`.&#10;- Refactored `MatchmakingService` to include enhanced query validation and error handling.&#10;- Updated `Generate` method to return detailed matchmaking results using `GetUserMatchmakingViewModel`.">
      <option name="closed" value="true" />
      <created>1752940200698</created>
      <option name="number" value="00053" />
      <option name="presentableId" value="LOCAL-00053" />
      <option name="project" value="LOCAL" />
      <updated>1752940200698</updated>
    </task>
    <task id="LOCAL-00054" summary="refactor: remove unused `GenerateMatchmakingQueryDTO` and `GenerateMatchmakingViewModel` classes">
      <option name="closed" value="true" />
      <created>1752940252028</created>
      <option name="number" value="00054" />
      <option name="presentableId" value="LOCAL-00054" />
      <option name="project" value="LOCAL" />
      <updated>1752940252028</updated>
    </task>
    <task id="LOCAL-00055" summary="refactor: switch matchmaking input from body to query parameters&#10;&#10;- Updated `GenerateMatchmaking` method in `MatchmakingController` to use query parameters instead of request body.&#10;- Adjusted `MatchmakingRoutes` to reflect the new query-based input.&#10;- Enhanced input validation with querystring schema in `MatchmakingRoutes`.">
      <option name="closed" value="true" />
      <created>1752947165529</created>
      <option name="number" value="00055" />
      <option name="presentableId" value="LOCAL-00055" />
      <option name="project" value="LOCAL" />
      <updated>1752947165530</updated>
    </task>
    <task id="LOCAL-00056" summary="feat: add token generation utility and improve coding style consistency&#10;&#10;- Added `generateToken` function in `AuthMiddleware` for JWT creation with a 1-hour expiration.&#10;- Enhanced code formatting across `AuthMiddleware` and `BaseController` for better readability.&#10;- Adjusted imports and structure of handler files during package reorganization.">
      <option name="closed" value="true" />
      <created>1753045816435</created>
      <option name="number" value="00056" />
      <option name="presentableId" value="LOCAL-00056" />
      <option name="project" value="LOCAL" />
      <updated>1753045816436</updated>
    </task>
    <task id="LOCAL-00057" summary="feat: implement JWT-based login flow with improved DTO and ViewModel structure&#10;&#10;- Added `Login` method in `LoginUserService` to handle user login with JWT generation.&#10;- Introduced `LoginUserViewModel` for structured token response.&#10;- Refactored DTO imports and file paths for better organization.&#10;- Updated `UserSessionRoutes` and `UserSessionController` to integrate new login logic.">
      <option name="closed" value="true" />
      <created>1753045833770</created>
      <option name="number" value="00057" />
      <option name="presentableId" value="LOCAL-00057" />
      <option name="project" value="LOCAL" />
      <updated>1753045833770</updated>
    </task>
    <task id="LOCAL-00058" summary="Merge: arquivos trazidos do merge">
      <option name="closed" value="true" />
      <created>1753045857572</created>
      <option name="number" value="00058" />
      <option name="presentableId" value="LOCAL-00058" />
      <option name="project" value="LOCAL" />
      <updated>1753045857572</updated>
    </task>
    <task id="LOCAL-00059" summary="feat: add `TokenBlacklistService` and integrate Redis dependency&#10;&#10;- Created `TokenBlacklistService` for managing blacklisted JWT tokens.&#10;- Added Redis client as a dependency for handling token storage.&#10;- Updated `package.json` to include `redis` dependency.">
      <option name="closed" value="true" />
      <created>1753048016876</created>
      <option name="number" value="00059" />
      <option name="presentableId" value="LOCAL-00059" />
      <option name="project" value="LOCAL" />
      <updated>1753048016876</updated>
    </task>
    <option name="localTasksCounter" value="60" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="feat: add new errors to `ErrorCatalog` and update history validation logic&#10;&#10;- Added `PlayerCantPlayAgainstSelf` and `NegativePoints` errors to `ErrorCatalog` for enhanced validation.&#10;- Renamed `GetAllHistoryDTO` and `GetHistoryQuery` to `GetAllHistoriesDTO` and `GetAllHistoriesQuery`.&#10;- Updated `CreateHistoryValidator` to enforce validation for self-play and negative points." />
    <MESSAGE value="feat: add history retrieval features and update tournament query DTO&#10;&#10;- Added `HistoryController` and `HistoryRoutes` to handle history functionality.&#10;- Implemented history-related DTOs for creating and retrieving history data.&#10;- Updated `GetAllTournamentsQuery` to use `username` instead of `userUuid`." />
    <MESSAGE value="feat: add history retrieval features and update tournament query DTO&#10;&#10;- Added `HistoryController` and `HistoryRoutes` to handle history functionality.&#10;- Implemented history-related DTOs for creating and retrieving history data.&#10;- Updated `GetAllTournamentsQuery` to use `username` instead of `userUuid`." />
    <MESSAGE value="feat: add `HistoryRepository` and integrate it with routes&#10;&#10;- Implemented `HistoryRepository` with `Create` and `GetAllHistoriesByUsername` methods.&#10;- Integrated `HistoryRoutes` and `HistoryController` into the application." />
    <MESSAGE value="feat: add `HistoryRepository` and integrate it with routes&#10;&#10;- Implemented `HistoryRepository` with `Create` and `GetAllHistoriesByUsername` methods.&#10;- Integrated `HistoryRoutes` and `HistoryController` into the application." />
    <MESSAGE value="feat: implement `GetAllHistories` in `HistoryService` and update `GetAllTournamentsDTO`&#10;&#10;- Added `GetAll` method in `HistoryService` to retrieve tournament histories based on username.&#10;- Updated `GetAllTournamentsDTO` to replace `userUuid` with `username`." />
    <MESSAGE value="feat: integrate `BackendApiClient` for user validation and win/lose tracking&#10;&#10;- Added `BackendApiClient` to `CreateHistoryCommandHandler` for tracking user win/lose metrics.&#10;- Renamed methods in `BackendApiClient` for consistency (`verifyUserExists` to `VerifyIfUsersExists`).&#10;- Introduced `AddWinLoseForUser` method in `BackendApiClient`.&#10;- Updated validators to use the newly renamed methods." />
    <MESSAGE value="feat: add matchmaking-related DTOs, query objects, and new validation errors&#10;&#10;- Introduced `GenerateMatchmakingDTO`, `GenerateMatchmakingQuery`, and `GenerateMatchmakingQueryDTO` for matchmaking logic.&#10;- Added `NegativeWins` error to `ErrorCatalog` for validation of win values.&#10;- Updated `ErrorCatalog` messages for consistency in backend API error naming." />
    <MESSAGE value="refactor: rename method in `IBackendApiClient` and update logs for clarity&#10;&#10;- Renamed `verifyUserExists` to `VerifyIfUsersExists` in `IBackendApiClient` for consistency.&#10;- Enhanced error logging in `index.ts` for better debugging. &#10;- Minor formatting updates in `HistoryRepository`." />
    <MESSAGE value="feat: implement matchmaking controller, view model, and query handlers&#10;&#10;- Added `MatchmakingController` with matchmaking logic and integration via `GenerateMatchmakingDTO`.&#10;- Introduced `GenerateMatchmakingViewModel` to structure matchmaking data.&#10;- Implemented `GenerateMatchmakingQueryHandler` and `GenerateMatchmakingQueryValidator` for query processing and validation." />
    <MESSAGE value="feat: add matchmaking service, user search method, and update routes&#10;&#10;- Implemented `MatchmakingService` with preliminary `Generate` logic.&#10;- Added `SearchForClosestOpponent` method in `UserRepository` for matchmaking user search based on win ratio and matches played.&#10;- Updated `UserRoutes` with corrected endpoint `/users/exists`.&#10;- Extended `NotificationError` with `SetAllErrorsToString` method for better error handling." />
    <MESSAGE value="chore: add missing newline and leave TODO for additional validators&#10;&#10;- Fixed missing newline in `GenerateMatchmakingQueryValidator.ts`.&#10;- Added a TODO placeholder to include validators for additional getters." />
    <MESSAGE value="chore: add TODO placeholders for unimplemented methods in `BackendApiClient`" />
    <MESSAGE value="feat: enhance matchmaking logic in `UserRepository` and add `GetUserMatchmakingQueryDTO`&#10;&#10;- Updated `SearchForClosestOpponent` to refine candidate selection based on win ratio differences.&#10;- Implemented a fallback `SearchForAnyOpponent` method for broader matchmaking.&#10;- Added `mapToUserMatchmakingQueryDTO` for structured matchmaking data mapping.&#10;- Introduced `GetUserMatchmakingQueryDTO` to support detailed matchmaking query responses." />
    <MESSAGE value="feat: update matchmaking DTOs and queries to support total games and username&#10;&#10;- Replaced `uuid` with `username` in `GenerateMatchmakingDTO` and `GenerateMatchmakingQuery`.&#10;- Added `totalGames` property to DTOs and queries for enhanced matchmaking logic.&#10;- Updated `BackendApiClient` with new methods for user verification and opponent search.&#10;- Added `NegativeValues` error to `ErrorCatalog` for input validation." />
    <MESSAGE value="refactor: replace `HistoryRepository` with `BackendApiClient` in `GenerateMatchmakingQueryHandler` and update validation&#10;&#10;- Updated `Handler` to use `BackendApiClient` for opponent search and user validation.&#10;- Extended input validation to include `totalGames` check.&#10;- Replaced `uuid` with `username` in user validation and opponent search methods." />
    <MESSAGE value="refactor: update `UserRepository` and `MatchmakingService` for improved matchmaking logic&#10;&#10;- Removed unnecessary `parameterLoses` from `SearchForClosestOpponent`" />
    <MESSAGE value="refactor: simplify `SearchForClosestOpponent` and enhance `MatchmakingService`&#10;&#10;- Removed unnecessary `paremterLoses` parameter from `SearchForClosestOpponent`.&#10;- Refactored `MatchmakingService` to include enhanced query validation and error handling.&#10;- Updated `Generate` method to return detailed matchmaking results using `GetUserMatchmakingViewModel`." />
    <MESSAGE value="refactor: remove unused `GenerateMatchmakingQueryDTO` and `GenerateMatchmakingViewModel` classes" />
    <MESSAGE value="refactor: switch matchmaking input from body to query parameters&#10;&#10;- Updated `GenerateMatchmaking` method in `MatchmakingController` to use query parameters instead of request body.&#10;- Adjusted `MatchmakingRoutes` to reflect the new query-based input.&#10;- Enhanced input validation with querystring schema in `MatchmakingRoutes`." />
    <MESSAGE value="refactor: switch tournament DTOs and routes to use usernames instead of UUIDs&#10;&#10;- Updated `EditTournamentDTO` and related controllers to replace UUIDs with usernames.&#10;- Modified tournament-related routes and schema validation to reflect the change.&#10;- Fixed typo in `tournamentUuid` field within `EditTournamentDTO` initialization." />
    <MESSAGE value="feat: add token generation utility and improve coding style consistency&#10;&#10;- Added `generateToken` function in `AuthMiddleware` for JWT creation with a 1-hour expiration.&#10;- Enhanced code formatting across `AuthMiddleware` and `BaseController` for better readability.&#10;- Adjusted imports and structure of handler files during package reorganization." />
    <MESSAGE value="feat: implement JWT-based login flow with improved DTO and ViewModel structure&#10;&#10;- Added `Login` method in `LoginUserService` to handle user login with JWT generation.&#10;- Introduced `LoginUserViewModel` for structured token response.&#10;- Refactored DTO imports and file paths for better organization.&#10;- Updated `UserSessionRoutes` and `UserSessionController` to integrate new login logic." />
    <MESSAGE value="Merge: arquivos trazidos do merge" />
    <MESSAGE value="feat: add `TokenBlacklistService` and integrate Redis dependency&#10;&#10;- Created `TokenBlacklistService` for managing blacklisted JWT tokens.&#10;- Added Redis client as a dependency for handling token storage.&#10;- Updated `package.json` to include `redis` dependency." />
    <option name="LAST_COMMIT_MESSAGE" value="feat: add `TokenBlacklistService` and integrate Redis dependency&#10;&#10;- Created `TokenBlacklistService` for managing blacklisted JWT tokens.&#10;- Added Redis client as a dependency for handling token storage.&#10;- Updated `package.json` to include `redis` dependency." />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/game-service/src/Presentation/Controllers/TournamentController.ts</url>
          <line>41</line>
          <option name="timeStamp" value="1" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/game-service/src/Presentation/Routes/TournamentRoutes/TournamentRoutes.ts</url>
          <line>28</line>
          <option name="timeStamp" value="3" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/backend/src/Presentation/Controllers/UserController.ts</url>
          <line>68</line>
          <option name="timeStamp" value="6" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/game-service/src/Presentation/Controllers/HistoryController.ts</url>
          <line>35</line>
          <option name="timeStamp" value="8" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/game-service/src/Presentation/Routes/HistoryRoutes/HistoryRoutes.ts</url>
          <line>22</line>
          <option name="timeStamp" value="9" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/game-service/dist/Application/Services/Concrete/MatchmakingService.js</url>
          <line>23</line>
          <option name="timeStamp" value="10" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/game-service/src/Application/Services/Concrete/MatchmakingService.ts</url>
          <line>31</line>
          <option name="timeStamp" value="11" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>