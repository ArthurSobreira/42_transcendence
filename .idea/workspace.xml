<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="6d3134b4-a67d-4c46-80e3-654566a805b8" name="Changes" comment="feat: setup TypeScript config and refactor TournamentRepository for unified Prisma access&#10;&#10;- Added `tsconfig.json` with standardized compiler options.&#10;- Removed redundant `PrismaClient` instantiation. TournamentRepository now uses a shared `PrismaService` (`@prisma`) for database operations.&#10;- Adjusted method calls in `TournamentRepository` to align with updated structure.&#10;- Added `TournamentRoutes` to configure endpoints for tournament operations.">
      <change afterPath="$PROJECT_DIR$/backend/src/Application/Queries/Handlers/VerifyIfUsersExistsByUuidsQueryHandler.ts" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/backend/src/Application/Queries/QueryObject/VerifyIfUsersExistsByUuidsQuery.ts" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/backend/src/Application/Services/Concrete/VerificationService.ts" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/backend/src/Domain/DTO/Query/VerifyIfUsersExistsByUuidsDTO.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/backend/src/Application/Queries/Handlers/BaseHandlerQuery.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/src/Application/Queries/Handlers/BaseHandlerQuery.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/backend/src/Application/Queries/QueryObject/GetUserQuery.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/src/Application/Queries/QueryObject/GetUserQuery.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/backend/src/Application/Services/Concrete/GetUserService.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/src/Application/Services/Concrete/GetUserService.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/backend/src/Domain/DTO/Query/GetUserDTO.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/src/Domain/DTO/Query/GetUserDTO.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/backend/src/Infrastructure/Persistence/Repositories/Concrete/UserRepository.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/src/Infrastructure/Persistence/Repositories/Concrete/UserRepository.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/backend/src/Presentation/Controllers/UserController.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/src/Presentation/Controllers/UserController.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/backend/src/Presentation/Controllers/UserSessionController.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/src/Presentation/Controllers/UserSessionController.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/backend/src/Presentation/Routes/UserRoutes/UserRoutes.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/src/Presentation/Routes/UserRoutes/UserRoutes.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/backend/src/Presentation/Routes/UserSessionRoutes/GoogleAuthHelpers.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/src/Presentation/Routes/UserSessionRoutes/GoogleAuthHelpers.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/backend/src/Presentation/Routes/UserSessionRoutes/UserSessionRoutes.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/src/Presentation/Routes/UserSessionRoutes/UserSessionRoutes.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/backend/src/Presentation/ViewModels/GetUserViewModel.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/src/Presentation/ViewModels/GetUserViewModel.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/backend/src/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/src/index.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/backend/tsconfig.json" beforeDir="false" afterPath="$PROJECT_DIR$/backend/tsconfig.json" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/tournament/Dockerfile" beforeDir="false" afterPath="$PROJECT_DIR$/tournament/Dockerfile" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/tournament/src/Application/Command/Validators/CreateTournamentValidator.ts" beforeDir="false" afterPath="$PROJECT_DIR$/tournament/src/Application/Command/Validators/CreateTournamentValidator.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/tournament/src/Infrastructure/Http/Concrete/BackendApiClient.ts" beforeDir="false" afterPath="$PROJECT_DIR$/tournament/src/Infrastructure/Http/Concrete/BackendApiClient.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/tournament/src/Presentation/Routes/TournamentRoutes/TournamentRoutes.ts" beforeDir="false" afterPath="$PROJECT_DIR$/tournament/src/Presentation/Routes/TournamentRoutes/TournamentRoutes.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/tournament/src/Shared/Errors/ErrorCatalog.ts" beforeDir="false" afterPath="$PROJECT_DIR$/tournament/src/Shared/Errors/ErrorCatalog.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/tournament/src/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/tournament/src/index.ts" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Dockerfile" />
        <option value="package.json" />
        <option value="TypeScript File" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="feature/new-trans" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;bonissanti&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/ArthurSobreira/42_transcendence.git&quot;,
    &quot;accountId&quot;: &quot;de286582-ad2a-4790-b6a2-7f4817dd9ce3&quot;
  }
}</component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 1
}</component>
  <component name="ProjectId" id="2zmKcedwfHZtt7z3RJYxcKbTeVN" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Docker.tournament: Compose Deployment.executor": "Run",
    "HTTP Request.http-requests-log | #1.executor": "Run",
    "HTTP Request.http-requests-log | #7.executor": "Run",
    "HTTP Request.rest-api_9 | #1.executor": "Run",
    "JavaScript Debug.127.0.0.1:8080.executor": "Debug",
    "JavaScript Debug.127.0.0.1:8081.executor": "Debug",
    "ModuleVcsDetector.initialDetectionPerformed": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.git.unshallow": "true",
    "git-widget-placeholder": "feature/new-tournament",
    "junie.onboarding.icon.badge.shown": "true",
    "last_opened_file_path": "/home/bruno/Documents/42SP/42_transcendence/tournament/src/Application/Queries/Handlers",
    "node.js.detected.package.eslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "npm.clean:dist.executor": "Run",
    "npm.start.executor": "Debug",
    "settings.editor.selected.configurable": "preferences.pluginManager",
    "ts.external.directory.path": "/home/bruno/Documents/42SP/42_transcendence/backend/node_modules/typescript/lib"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/tournament/src/Application/Queries/Handlers" />
      <recent name="$PROJECT_DIR$/tournament/src/Application/DTO/ToQuery" />
      <recent name="$PROJECT_DIR$/tournament/src/Application/Services/Concrete" />
      <recent name="$PROJECT_DIR$/tournament/src/Domain/DTO/Command" />
      <recent name="$PROJECT_DIR$/tournament/src/Presentation/Controllers" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/backend/src/Domain/DTO/Query" />
      <recent name="$PROJECT_DIR$/tournament/src/Application" />
      <recent name="$PROJECT_DIR$/tournament/src/Application/Queries/QueryObject" />
    </key>
  </component>
  <component name="RunManager" selected="HTTP Request.http-requests-log | #7">
    <configuration name="http-requests-log | #1" type="HttpClient.HttpRequestRunConfigurationType" factoryName="HTTP Request" temporary="true" nameIsGenerated="true" path="$PROJECT_DIR$/.idea/httpRequests/http-requests-log.http" executionIdentifier="#1" runType="Run single request">
      <method v="2" />
    </configuration>
    <configuration name="http-requests-log | #7" type="HttpClient.HttpRequestRunConfigurationType" factoryName="HTTP Request" temporary="true" nameIsGenerated="true" path="$PROJECT_DIR$/.idea/httpRequests/http-requests-log.http" executionIdentifier="#7" index="7" runType="Run single request">
      <method v="2" />
    </configuration>
    <configuration name="rest-api_9 | #1" type="HttpClient.HttpRequestRunConfigurationType" factoryName="HTTP Request" temporary="true" nameIsGenerated="true" path="$APPLICATION_CONFIG_DIR$/scratches/rest-api_9.http" executionIdentifier="#1" runType="Run single request">
      <method v="2" />
    </configuration>
    <configuration name="127.0.0.1:8080" type="JavascriptDebugType" temporary="true" nameIsGenerated="true" uri="http://127.0.0.1:8080">
      <method v="2" />
    </configuration>
    <configuration name="127.0.0.1:8081" type="JavascriptDebugType" temporary="true" nameIsGenerated="true" uri="http://127.0.0.1:8081">
      <method v="2" />
    </configuration>
    <configuration default="true" type="docker-deploy" factoryName="docker-compose.yml" temporary="true">
      <deployment type="docker-compose.yml">
        <settings />
      </deployment>
      <method v="2" />
    </configuration>
    <configuration name="start" type="js.build_tools.npm" nameIsGenerated="true">
      <package-json value="$PROJECT_DIR$/package.json" />
      <command value="start" />
      <node-interpreter value="project" />
      <envs />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="HTTP Request.http-requests-log | #7" />
      <item itemvalue="HTTP Request.http-requests-log | #1" />
      <item itemvalue="HTTP Request.rest-api_9 | #1" />
      <item itemvalue="JavaScript Debug.127.0.0.1:8080" />
      <item itemvalue="JavaScript Debug.127.0.0.1:8081" />
      <item itemvalue="npm.start" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="HTTP Request.http-requests-log | #7" />
        <item itemvalue="JavaScript Debug.127.0.0.1:8081" />
        <item itemvalue="HTTP Request.http-requests-log | #1" />
        <item itemvalue="JavaScript Debug.127.0.0.1:8080" />
        <item itemvalue="HTTP Request.rest-api_9 | #1" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-js-predefined-d6986cc7102b-09060db00ec0-JavaScript-WS-251.26927.40" />
      </set>
    </attachedChunks>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="6d3134b4-a67d-4c46-80e3-654566a805b8" name="Changes" comment="" />
      <created>1752330888248</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1752330888248</updated>
      <workItem from="1752330889369" duration="4328000" />
      <workItem from="1752335230569" duration="2175000" />
      <workItem from="1752342442241" duration="1755000" />
      <workItem from="1752344203319" duration="11126000" />
      <workItem from="1752355352918" duration="731000" />
      <workItem from="1752356104739" duration="4274000" />
      <workItem from="1752529945400" duration="5257000" />
      <workItem from="1752535229586" duration="790000" />
      <workItem from="1752536105787" duration="659000" />
      <workItem from="1752536928505" duration="86000" />
      <workItem from="1752537118401" duration="535000" />
      <workItem from="1752539480256" duration="287000" />
      <workItem from="1752622489377" duration="1208000" />
      <workItem from="1752623711391" duration="2314000" />
      <workItem from="1752626039489" duration="2804000" />
    </task>
    <task id="LOCAL-00001" summary="refactor: Fix imports, update error handling, and add Dockerfile for tournament&#10;&#10;- Adjusted imports in `EditUserService.ts` for paths consistency.  &#10;- Updated error message key (`InvalidProfilePicExtension` to `InvalidExtension`) in `CreateUserCommandValidator.ts`.  &#10;- Added `Dockerfile` for tournament module to support containerization and deployment.">
      <option name="closed" value="true" />
      <created>1752335637646</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1752335637646</updated>
    </task>
    <task id="LOCAL-00002" summary="refactor: streamline `GetUserDTO` and related query handling, adjust imports&#10;&#10;- Removed unused properties from `GetUserDTO` and simplified constructor parameters.&#10;- Updated `GetUserQuery` to align with streamlined DTO structure.&#10;- Adjusted imports in `GoogleAuthHelpers` for consistency and added bcrypt support.">
      <option name="closed" value="true" />
      <created>1752335649337</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1752335649337</updated>
    </task>
    <task id="LOCAL-00003" summary="feat: add tournament module with Prisma schema, package.json setup, and import fixes&#10;&#10;- Introduced `tournament` module with `Prisma` schema setup for SQLite.&#10;- Added `package.json` for dependencies, scripts, and dev tools specific to the tournament.&#10;- Fixed incorrect import paths in `LoginUserService` and `LogoutUserService`.">
      <option name="closed" value="true" />
      <created>1752335658915</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1752335658915</updated>
    </task>
    <task id="LOCAL-00004" summary="refactor: simplify `/users/me` route and clean up User-related entities&#10;&#10;- Optimized `/users/me` route handling by integrating `GetUser` method and removing redundant logic.&#10;- Removed unused `crypto` import from `User` entity.&#10;- Adjusted formatting for consistency in `UserRepository` methods.&#10;- Streamlined `GetUserDTO` initialization in `UserController`.">
      <option name="closed" value="true" />
      <created>1752335670656</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1752335670656</updated>
    </task>
    <task id="LOCAL-00005" summary="refactor: update `UserSessionRoutes`, DTO structure, and imports for consistency&#10;&#10;- Replaced redundant body typing with `UserSessionDTO` in `UserSessionRoutes`.&#10;- Updated `UserSessionController` methods to use DTOs and simplified notification handling.&#10;- Removed unused imports and fixed import paths for `LoginUserService` and `LogoutUserService`.&#10;- Adjusted IDE configuration sync and resolved minor formatting issues in `.idea/workspace.xml`.">
      <option name="closed" value="true" />
      <created>1752335679890</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1752335679890</updated>
    </task>
    <task id="LOCAL-00006" summary="feat: add shared utilities, custom error handling, and validation for tournament module&#10;&#10;- Introduced `CustomError` class for standardized error handling and messages.&#10;- Added `NotificationError` and `ValidationException` classes to manage grouped and validation-specific errors.&#10;- Created `Result` utility for success/failure operations with optional data handling.&#10;- Included `fs.rmdir.ts` utility to clear the `dist` folder during build processes.&#10;- Added placeholder `ErrorCatalog` for future error definitions.">
      <option name="closed" value="true" />
      <created>1752335774446</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1752335774446</updated>
    </task>
    <task id="LOCAL-00007" summary="feat: add BackendApiClient and AuthMiddleware for user verification and JWT authentication&#10;&#10;- Implemented `BackendApiClient` to handle user existence verification via the backend API.&#10;- Introduced `authenticateJWT` middleware to handle JWT verification and unauthorized responses.">
      <option name="closed" value="true" />
      <created>1752353183126</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1752353183126</updated>
    </task>
    <task id="LOCAL-00008" summary="feat: add base abstractions for tournament module controllers, entities, and commands&#10;&#10;- Introduced `BaseController` to standardize result handling and error response logic.&#10;- Added `BaseEntity` interface for common entity properties like `Uuid`.&#10;- Implemented `BaseHandlerCommand` interface to enforce structure for command handling with notifications.">
      <option name="closed" value="true" />
      <created>1752353191840</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1752353191840</updated>
    </task>
    <task id="LOCAL-00009" summary="feat: add base abstractions for tournament module&#10;&#10;- Introduced `BaseHandlerQuery` and `BaseValidator` interfaces for query and command validation structure.&#10;- Implemented `CreateTournamentCommand` class to encapsulate tournament creation command logic.&#10;- Added `BaseService` interface to standardize service execution with request-reply handling.">
      <option name="closed" value="true" />
      <created>1752353204272</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1752353204272</updated>
    </task>
    <task id="LOCAL-00010" summary="feat: add validators and DTOs for tournament module commands  &#10;&#10;- Implemented `CreateTournamentDTO` and `DeleteTournamentDTO` for handling respective command data.  &#10;- Added `CreateTournamentValidator` and `DeleteUserCommandValidator` for validating tournament and user commands.  &#10;- Introduced `DeleteUserCommandHandler` to handle user deletion logic via repository.">
      <option name="closed" value="true" />
      <created>1752353216838</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1752353216838</updated>
    </task>
    <task id="LOCAL-00011" summary="feat: add validators and DTOs for tournament module commands  &#10;&#10;- Implemented `CreateTournamentDTO` and `DeleteTournamentDTO` for handling respective command data.  &#10;- Added `CreateTournamentValidator` and `DeleteUserCommandValidator` for validating tournament and user commands.  &#10;- Introduced `DeleteUserCommandHandler` to handle user deletion logic via repository.">
      <option name="closed" value="true" />
      <created>1752353230365</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1752353230365</updated>
    </task>
    <task id="LOCAL-00012" summary="feat: add query handlers, DTOs, and validators for `GetUser` and `GetTournament` operations&#10;&#10;- Implemented `GetUserQueryHandler` and `GetTournamentQueryDTO` for handling user and tournament queries.&#10;- Added `GetUserQueryValidator` for input validation of user queries.&#10;- Introduced supporting DTOs and query objects for tournament and user processing.">
      <option name="closed" value="true" />
      <created>1752353261970</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1752353261970</updated>
    </task>
    <task id="LOCAL-00013" summary="feat: implement session command handlers and validators for login and logout actions&#10;&#10;- Added `LoginSessionCommandHandler` and `LogoutSessionCommandHandler` for handling login/logout operations.&#10;- Implemented validators `LoginSessionCommandValidator` and `LogoutSessionCommandValidator` with comprehensive validation logic.&#10;- Integrated repository and error notification for user existence and credential checks.">
      <option name="closed" value="true" />
      <created>1752353280002</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1752353280002</updated>
    </task>
    <task id="LOCAL-00014" summary="feat: add unique `tournamentUuid` column and comment out PrismaService initialization&#10;&#10;- Added `tournamentUuid` column with unique constraint to `Tournament` model for better identification.&#10;- Commented out PrismaService initialization in preparation for potential refactoring or alternative implementation.">
      <option name="closed" value="true" />
      <created>1752353290701</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1752353290701</updated>
    </task>
    <task id="LOCAL-00015" summary="feat: implement tournament command handlers, validators, and services&#10;&#10;- Added `CreateTournamentCommandHandler`, `EditTournamentCommandHandler`, and `DeleteTournamentCommandHandler` for tournament operations.&#10;- Implemented `EditTournamentCommandValidator` and `DeleteTournamentCommandValidator` for validation.&#10;- Created services: `CreateTournamentService`, `EditTournamentService`, and `DeleteTournamentService` to handle logic and execution flow. &#10;- Enhanced `BaseHandlerQuery` to support result typing.&#10;- Introduced DTOs and command objects for tournament operations.">
      <option name="closed" value="true" />
      <created>1752358575693</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1752358575694</updated>
    </task>
    <task id="LOCAL-00016" summary="feat: implement query handlers, DTOs, and services for `GetAllTournaments` and improve existing tournament query operations&#10;&#10;- Added `GetAllTournamentQueryHandler` to handle all tournaments query logic.&#10;- Implemented new DTOs: `GetAllTournamentsDTO`, `GetAllTournamentsQueryDTO`, and `GetAllTournamentsViewModel`.&#10;- Created `GetAllTournamentService` to manage query execution and result transformation.&#10;- Enhanced existing `GetTournamentQuery` with `fromDTO` method and resolved typos in `GetTournamentDTO`. &#10;- Refactored `GetUserQueryHandler` to `GetTournamentQueryHandler` and updated corresponding methods and repositories.">
      <option name="closed" value="true" />
      <created>1752358588093</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1752358588093</updated>
    </task>
    <task id="LOCAL-00017" summary="refactor: replace session commands with tournament-based operations and refactor structure&#10;&#10;- Removed `LoginSessionCommandHandler`, `LogoutSessionCommandHandler`, and related validators.&#10;- Added `TournamentController` with methods for managing tournament operations.&#10;- Introduced `TournamentRepository` and `Tournament` entity to handle tournament persistence and data transformation.&#10;- Updated `GetUserQueryValidator` to reference tournaments instead of users.&#10;- Simplified workspace configuration and adjusted file paths for consistency.">
      <option name="closed" value="true" />
      <created>1752358596569</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1752358596569</updated>
    </task>
    <task id="LOCAL-00018" summary="feat: add `tournament` service to docker-compose and refactor tournament services&#10;&#10;- Added `tournament` service configuration, including environment variables, ports, and volumes.&#10;- Adjusted `EditTournamentCommand` to require all player UUIDs as non-optional.&#10;- Refactored `CreateTournamentService` and `DeleteTournamentService` to instantiate `TournamentRepository` internally instead of passing it as a parameter.&#10;- Fixed missing newline in `BaseEntity` interface.">
      <option name="closed" value="true" />
      <created>1752535761963</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1752535761963</updated>
    </task>
    <task id="LOCAL-00019" summary="refactor: make player UUIDs in `EditTournamentDTO` required and adjust internal repository instantiation&#10;&#10;- Updated `EditTournamentDTO` to require `player3Uuid` and `player4Uuid` as mandatory fields.&#10;- Modified `GetAllTournamentService` and `EditTournamentService` to internally instantiate `TournamentRepository`.&#10;- Improved type safety in `EditTournamentCommandHandler` by removing nullable checks for `ChangeFields` method arguments.">
      <option name="closed" value="true" />
      <created>1752535772895</created>
      <option name="number" value="00019" />
      <option name="presentableId" value="LOCAL-00019" />
      <option name="project" value="LOCAL" />
      <updated>1752535772895</updated>
    </task>
    <task id="LOCAL-00020" summary="refactor: replace user-related logic with tournament operations and instantiate repository internally&#10;&#10;- Updated `GetUserQueryValidator` to handle `GetTournamentQuery` and `DeleteTournamentCommand` instead of user operations.&#10;- Removed user-related DTOs, entities, and types from `IBaseRepository`.&#10;- Internally instantiated `TournamentRepository` in `GetTournamentService` constructor for consistency.&#10;- Added new entry point `index.ts` to initialize server with `fastify` and configure tournament routes.&#10;- Upgraded `@prisma/client` and `prisma` dependencies to latest versions.">
      <option name="closed" value="true" />
      <created>1752535781434</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1752535781434</updated>
    </task>
    <task id="LOCAL-00021" summary="feat: initialize core tournament services, enhance DTOs, and update schema&#10;&#10;- Added services: `EditTournamentService`, `DeleteTournamentService`, `GetTournamentService`, and `GetAllTournamentService` with internal repository instantiation.&#10;- Enhanced `TournamentController` methods to handle query parameters and corrected DTO instantiations.&#10;- Updated `Tournament` entity to include `tournamentUuid` generation via `crypto.randomUUID`.&#10;- Modified Prisma schema: changed database file name, adjusted field constraints, and added `PrismaService`.">
      <option name="closed" value="true" />
      <created>1752535795614</created>
      <option name="number" value="00021" />
      <option name="presentableId" value="LOCAL-00021" />
      <option name="project" value="LOCAL" />
      <updated>1752535795614</updated>
    </task>
    <task id="LOCAL-00022" summary="feat: setup TypeScript config and refactor TournamentRepository for unified Prisma access&#10;&#10;- Added `tsconfig.json` with standardized compiler options.&#10;- Removed redundant `PrismaClient` instantiation. TournamentRepository now uses a shared `PrismaService` (`@prisma`) for database operations.&#10;- Adjusted method calls in `TournamentRepository` to align with updated structure.&#10;- Added `TournamentRoutes` to configure endpoints for tournament operations.">
      <option name="closed" value="true" />
      <created>1752535802718</created>
      <option name="number" value="00022" />
      <option name="presentableId" value="LOCAL-00022" />
      <option name="project" value="LOCAL" />
      <updated>1752535802718</updated>
    </task>
    <option name="localTasksCounter" value="23" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="refactor: Fix imports, update error handling, and add Dockerfile for tournament&#10;&#10;- Adjusted imports in `EditUserService.ts` for paths consistency.  &#10;- Updated error message key (`InvalidProfilePicExtension` to `InvalidExtension`) in `CreateUserCommandValidator.ts`.  &#10;- Added `Dockerfile` for tournament module to support containerization and deployment." />
    <MESSAGE value="refactor: streamline `GetUserDTO` and related query handling, adjust imports&#10;&#10;- Removed unused properties from `GetUserDTO` and simplified constructor parameters.&#10;- Updated `GetUserQuery` to align with streamlined DTO structure.&#10;- Adjusted imports in `GoogleAuthHelpers` for consistency and added bcrypt support." />
    <MESSAGE value="feat: add tournament module with Prisma schema, package.json setup, and import fixes&#10;&#10;- Introduced `tournament` module with `Prisma` schema setup for SQLite.&#10;- Added `package.json` for dependencies, scripts, and dev tools specific to the tournament.&#10;- Fixed incorrect import paths in `LoginUserService` and `LogoutUserService`." />
    <MESSAGE value="refactor: simplify `/users/me` route and clean up User-related entities&#10;&#10;- Optimized `/users/me` route handling by integrating `GetUser` method and removing redundant logic.&#10;- Removed unused `crypto` import from `User` entity.&#10;- Adjusted formatting for consistency in `UserRepository` methods.&#10;- Streamlined `GetUserDTO` initialization in `UserController`." />
    <MESSAGE value="refactor: update `UserSessionRoutes`, DTO structure, and imports for consistency&#10;&#10;- Replaced redundant body typing with `UserSessionDTO` in `UserSessionRoutes`.&#10;- Updated `UserSessionController` methods to use DTOs and simplified notification handling.&#10;- Removed unused imports and fixed import paths for `LoginUserService` and `LogoutUserService`.&#10;- Adjusted IDE configuration sync and resolved minor formatting issues in `.idea/workspace.xml`." />
    <MESSAGE value="feat: add shared utilities, custom error handling, and validation for tournament module&#10;&#10;- Introduced `CustomError` class for standardized error handling and messages.&#10;- Added `NotificationError` and `ValidationException` classes to manage grouped and validation-specific errors.&#10;- Created `Result` utility for success/failure operations with optional data handling.&#10;- Included `fs.rmdir.ts` utility to clear the `dist` folder during build processes.&#10;- Added placeholder `ErrorCatalog` for future error definitions." />
    <MESSAGE value="feat: add BackendApiClient and AuthMiddleware for user verification and JWT authentication&#10;&#10;- Implemented `BackendApiClient` to handle user existence verification via the backend API.&#10;- Introduced `authenticateJWT` middleware to handle JWT verification and unauthorized responses." />
    <MESSAGE value="feat: add base abstractions for tournament module controllers, entities, and commands&#10;&#10;- Introduced `BaseController` to standardize result handling and error response logic.&#10;- Added `BaseEntity` interface for common entity properties like `Uuid`.&#10;- Implemented `BaseHandlerCommand` interface to enforce structure for command handling with notifications." />
    <MESSAGE value="feat: add base abstractions for tournament module&#10;&#10;- Introduced `BaseHandlerQuery` and `BaseValidator` interfaces for query and command validation structure.&#10;- Implemented `CreateTournamentCommand` class to encapsulate tournament creation command logic.&#10;- Added `BaseService` interface to standardize service execution with request-reply handling." />
    <MESSAGE value="feat: add validators and DTOs for tournament module commands  &#10;&#10;- Implemented `CreateTournamentDTO` and `DeleteTournamentDTO` for handling respective command data.  &#10;- Added `CreateTournamentValidator` and `DeleteUserCommandValidator` for validating tournament and user commands.  &#10;- Introduced `DeleteUserCommandHandler` to handle user deletion logic via repository." />
    <MESSAGE value="feat: add query handlers, DTOs, and validators for `GetUser` and `GetTournament` operations&#10;&#10;- Implemented `GetUserQueryHandler` and `GetTournamentQueryDTO` for handling user and tournament queries.&#10;- Added `GetUserQueryValidator` for input validation of user queries.&#10;- Introduced supporting DTOs and query objects for tournament and user processing." />
    <MESSAGE value="feat: implement session command handlers and validators for login and logout actions&#10;&#10;- Added `LoginSessionCommandHandler` and `LogoutSessionCommandHandler` for handling login/logout operations.&#10;- Implemented validators `LoginSessionCommandValidator` and `LogoutSessionCommandValidator` with comprehensive validation logic.&#10;- Integrated repository and error notification for user existence and credential checks." />
    <MESSAGE value="feat: add unique `tournamentUuid` column and comment out PrismaService initialization&#10;&#10;- Added `tournamentUuid` column with unique constraint to `Tournament` model for better identification.&#10;- Commented out PrismaService initialization in preparation for potential refactoring or alternative implementation." />
    <MESSAGE value="feat: implement tournament command handlers, validators, and services&#10;&#10;- Added `CreateTournamentCommandHandler`, `EditTournamentCommandHandler`, and `DeleteTournamentCommandHandler` for tournament operations.&#10;- Implemented `EditTournamentCommandValidator` and `DeleteTournamentCommandValidator` for validation.&#10;- Created services: `CreateTournamentService`, `EditTournamentService`, and `DeleteTournamentService` to handle logic and execution flow. &#10;- Enhanced `BaseHandlerQuery` to support result typing.&#10;- Introduced DTOs and command objects for tournament operations." />
    <MESSAGE value="feat: implement query handlers, DTOs, and services for `GetAllTournaments` and improve existing tournament query operations&#10;&#10;- Added `GetAllTournamentQueryHandler` to handle all tournaments query logic.&#10;- Implemented new DTOs: `GetAllTournamentsDTO`, `GetAllTournamentsQueryDTO`, and `GetAllTournamentsViewModel`.&#10;- Created `GetAllTournamentService` to manage query execution and result transformation.&#10;- Enhanced existing `GetTournamentQuery` with `fromDTO` method and resolved typos in `GetTournamentDTO`. &#10;- Refactored `GetUserQueryHandler` to `GetTournamentQueryHandler` and updated corresponding methods and repositories." />
    <MESSAGE value="refactor: replace session commands with tournament-based operations and refactor structure&#10;&#10;- Removed `LoginSessionCommandHandler`, `LogoutSessionCommandHandler`, and related validators.&#10;- Added `TournamentController` with methods for managing tournament operations.&#10;- Introduced `TournamentRepository` and `Tournament` entity to handle tournament persistence and data transformation.&#10;- Updated `GetUserQueryValidator` to reference tournaments instead of users.&#10;- Simplified workspace configuration and adjusted file paths for consistency." />
    <MESSAGE value="feat: add `tournament` service to docker-compose and refactor tournament services&#10;&#10;- Added `tournament` service configuration, including environment variables, ports, and volumes.&#10;- Adjusted `EditTournamentCommand` to require all player UUIDs as non-optional.&#10;- Refactored `CreateTournamentService` and `DeleteTournamentService` to instantiate `TournamentRepository` internally instead of passing it as a parameter.&#10;- Fixed missing newline in `BaseEntity` interface." />
    <MESSAGE value="refactor: make player UUIDs in `EditTournamentDTO` required and adjust internal repository instantiation&#10;&#10;- Updated `EditTournamentDTO` to require `player3Uuid` and `player4Uuid` as mandatory fields.&#10;- Modified `GetAllTournamentService` and `EditTournamentService` to internally instantiate `TournamentRepository`.&#10;- Improved type safety in `EditTournamentCommandHandler` by removing nullable checks for `ChangeFields` method arguments." />
    <MESSAGE value="refactor: replace user-related logic with tournament operations and instantiate repository internally&#10;&#10;- Updated `GetUserQueryValidator` to handle `GetTournamentQuery` and `DeleteTournamentCommand` instead of user operations.&#10;- Removed user-related DTOs, entities, and types from `IBaseRepository`.&#10;- Internally instantiated `TournamentRepository` in `GetTournamentService` constructor for consistency.&#10;- Added new entry point `index.ts` to initialize server with `fastify` and configure tournament routes.&#10;- Upgraded `@prisma/client` and `prisma` dependencies to latest versions." />
    <MESSAGE value="feat: initialize core tournament services, enhance DTOs, and update schema&#10;&#10;- Added services: `EditTournamentService`, `DeleteTournamentService`, `GetTournamentService`, and `GetAllTournamentService` with internal repository instantiation.&#10;- Enhanced `TournamentController` methods to handle query parameters and corrected DTO instantiations.&#10;- Updated `Tournament` entity to include `tournamentUuid` generation via `crypto.randomUUID`.&#10;- Modified Prisma schema: changed database file name, adjusted field constraints, and added `PrismaService`." />
    <MESSAGE value="feat: setup TypeScript config and refactor TournamentRepository for unified Prisma access&#10;&#10;- Added `tsconfig.json` with standardized compiler options.&#10;- Removed redundant `PrismaClient` instantiation. TournamentRepository now uses a shared `PrismaService` (`@prisma`) for database operations.&#10;- Adjusted method calls in `TournamentRepository` to align with updated structure.&#10;- Added `TournamentRoutes` to configure endpoints for tournament operations." />
    <option name="LAST_COMMIT_MESSAGE" value="feat: setup TypeScript config and refactor TournamentRepository for unified Prisma access&#10;&#10;- Added `tsconfig.json` with standardized compiler options.&#10;- Removed redundant `PrismaClient` instantiation. TournamentRepository now uses a shared `PrismaService` (`@prisma`) for database operations.&#10;- Adjusted method calls in `TournamentRepository` to align with updated structure.&#10;- Added `TournamentRoutes` to configure endpoints for tournament operations." />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/tournament/src/Presentation/Controllers/TournamentController.ts</url>
          <line>41</line>
          <option name="timeStamp" value="1" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/tournament/src/Presentation/Routes/TournamentRoutes/TournamentRoutes.ts</url>
          <line>28</line>
          <option name="timeStamp" value="3" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/tournament/src/index.ts</url>
          <line>14</line>
          <option name="timeStamp" value="4" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/tournament/src/index.ts</url>
          <line>8</line>
          <option name="timeStamp" value="5" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/backend/src/Presentation/Controllers/UserController.ts</url>
          <line>68</line>
          <properties lambdaOrdinal="-1" />
          <option name="timeStamp" value="6" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="javascript">
          <url>file://$PROJECT_DIR$/tournament/src/Infrastructure/Http/Concrete/BackendApiClient.ts</url>
          <line>12</line>
          <properties lambdaOrdinal="-1" />
          <option name="timeStamp" value="7" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>