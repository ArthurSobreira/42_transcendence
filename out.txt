Árvore de: frontend/
├── tailwind.config.js
│   └── Conteúdo de tailwind.config.js:
│       /** @type {import('tailwindcss').Config} */
│       export default {
│         content: [
│           "./index.html",
│           "./src/**/*.{js,ts}",
│           "./public/pages/**/*.html",
│         ],
│         theme: {
│           extend: {
│             fontFamily: {
│               'press-start': ['"Press Start 2P"', 'cursive'],
│             },
│             boxShadow: {
│               'retro': '0 0 20px rgba(255, 255, 255, 0.5)',
│               'retro-hover': '0 4px 10px rgba(79, 70, 229, 0.5)',
│             },
│           },
│         },
│         plugins: [],
│       }
├── package.json
│   └── Conteúdo de package.json:
│       {
│         "name": "transcendence-frontend",
│         "private": true,
│         "version": "1.0.0",
│         "type": "module",
│         "scripts": {
│           "dev": "vite",
│           "build": "tsc && vite build",
│           "preview": "vite preview"
│         },
│         "devDependencies": {
│           "autoprefixer": "^10.4.19",
│           "postcss": "^8.4.38",
│           "tailwindcss": "^3.4.4",
│           "typescript": "^5.2.2",
│           "vite": "^5.2.0"
│         }
│       }
├── tsconfig.json
│   └── Conteúdo de tsconfig.json:
│       {
│         "compilerOptions": {
│           "target": "ESNext",
│           "useDefineForClassFields": true,
│           "module": "ESNext",
│           "lib": ["ESNext", "DOM", "DOM.Iterable"],
│           "skipLibCheck": true,
│           "moduleResolution": "bundler",
│           "allowImportingTsExtensions": true,
│           "resolveJsonModule": true,
│           "isolatedModules": true,
│           "noEmit": true,
│           "strict": true,
│           "noUnusedLocals": true,
│           "noUnusedParameters": true,
│           "noFallthroughCasesInSwitch": true
│         },
│         "include": ["src"]
│       }
├── src
│   ├── pong
│   │   ├── remote.ts
│   │   │   └── Conteúdo de remote.ts:
│   │   │       import {
│   │   │         initSharedState, stopSharedState, draw, keys,
│   │   │         setBall, setPlayer1, setPlayer2, setAnimationFrameId, setIsWaiting,
│   │   │       } from './common';
│   │   │       
│   │   │       let ws: WebSocket | null = null;
│   │   │       let opponentId: string | null = null;
│   │   │       let animationFrameId: number | null = null;
│   │   │       
│   │   │       function showInvitePopup(inviterId: string, inviterUsername: string) {
│   │   │         const popup = document.createElement('div');
│   │   │         popup.className = 'invite-popup';
│   │   │         popup.innerHTML = `
│   │   │           <div class="popup-content">
│   │   │             <p>${inviterUsername} está te convidando para jogar!</p>
│   │   │             <button id="accept-invite">Aceitar</button>
│   │   │             <button id="reject-invite">Rejeitar</button>
│   │   │           </div>
│   │   │         `;
│   │   │         document.body.appendChild(popup);
│   │   │       
│   │   │         document.getElementById('accept-invite')?.addEventListener('click', () => {
│   │   │           ws?.send(JSON.stringify({ type: 'accept_invite', inviterId }));
│   │   │           document.body.removeChild(popup);
│   │   │         });
│   │   │       
│   │   │         document.getElementById('reject-invite')?.addEventListener('click', () => {
│   │   │           ws?.send(JSON.stringify({ type: 'reject_invite', inviterId }));
│   │   │           document.body.removeChild(popup);
│   │   │         });
│   │   │       
│   │   │         setTimeout(() => {
│   │   │           if (document.body.contains(popup)) {
│   │   │             document.body.removeChild(popup);
│   │   │           }
│   │   │         }, 10000);
│   │   │       }
│   │   │       
│   │   │       function updateRemote() {
│   │   │         if (ws && ws.readyState === WebSocket.OPEN) {
│   │   │           ws.send(JSON.stringify({
│   │   │             type: 'keys',
│   │   │             keys: {
│   │   │               'w': keys['w'],
│   │   │               's': keys['s'],
│   │   │               'ArrowUp': keys['ArrowUp'],
│   │   │               'ArrowDown': keys['ArrowDown']
│   │   │             }
│   │   │           }));
│   │   │         }
│   │   │       }
│   │   │       
│   │   │       function gameLoop() {
│   │   │         updateRemote();
│   │   │         draw();
│   │   │         animationFrameId = requestAnimationFrame(gameLoop);
│   │   │         setAnimationFrameId(animationFrameId);
│   │   │       }
│   │   │       
│   │   │       export function initRemoteGame(_opponentId?: string) {
│   │   │         if (!initSharedState()) return;
│   │   │       
│   │   │         opponentId = _opponentId || null;
│   │   │         const token = localStorage.getItem('jwtToken');
│   │   │         if (!token) return;
│   │   │         const payload = JSON.parse(atob(token.split('.')[1]));
│   │   │         const userId = payload.uuid;
│   │   │       
│   │   │         ws = new WebSocket(`ws://localhost:8081?userId=${userId}`);
│   │   │       
│   │   │         ws.onopen = () => {
│   │   │           if (opponentId) {
│   │   │             ws?.send(JSON.stringify({ type: 'invite', opponentId }));
│   │   │             setIsWaiting(true);
│   │   │           }
│   │   │         };
│   │   │       
│   │   │         ws.onmessage = (event) => {
│   │   │           const message = JSON.parse(event.data);
│   │   │           switch (message.type) {
│   │   │             case 'invite_received':
│   │   │               showInvitePopup(message.inviterId, message.inviterUsername);
│   │   │               break;
│   │   │             case 'invite_rejected':
│   │   │               alert(`${message.inviteeUsername} recusou o convite.`);
│   │   │               stopRemoteGame();
│   │   │               window.location.hash = '/pong/remote-multiplayer';
│   │   │               break;
│   │   │             case 'game_start':
│   │   │               setIsWaiting(false);
│   │   │               gameLoop();
│   │   │               break;
│   │   │             case 'update':
│   │   │               setBall(message.ball);
│   │   │               setPlayer1(message.player1);
│   │   │               setPlayer2(message.player2);
│   │   │               break;
│   │   │             case 'game_over':
│   │   │               alert(message.winner === message.playerNumber ? 'Você ganhou!' : 'Você perdeu!');
│   │   │               stopRemoteGame();
│   │   │               window.location.hash = '/';
│   │   │               break;
│   │   │             case 'error':
│   │   │               alert(`Erro do servidor: ${message.message}`);
│   │   │               stopRemoteGame();
│   │   │               window.location.hash = '/';
│   │   │               break;
│   │   │           }
│   │   │         };
│   │   │       
│   │   │         ws.onclose = () => {
│   │   │           alert("A conexão com o servidor foi perdida.");
│   │   │           stopRemoteGame();
│   │   │           window.location.hash = '/';
│   │   │         };
│   │   │       }
│   │   │       
│   │   │       export function stopRemoteGame() {
│   │   │         stopSharedState();
│   │   │         if (animationFrameId) {
│   │   │           cancelAnimationFrame(animationFrameId);
│   │   │           animationFrameId = null;
│   │   │         }
│   │   │         if (ws) {
│   │   │           ws.onmessage = null;
│   │   │           ws.onclose = null;
│   │   │           ws.close();
│   │   │           ws = null;
│   │   │         }
│   │   │       }
│   │   ├── multiplayer.ts
│   │   │   └── Conteúdo de multiplayer.ts:
│   │   │       import {
│   │   │         initSharedState, stopSharedState, draw, collides, resetBall, keys,
│   │   │         getCanvas, getBall, getPlayer1, getPlayer2, setAnimationFrameId,
│   │   │         PADDLE_SPEED, WIN_SCORE
│   │   │       } from './common';
│   │   │       
│   │   │       let speedIntervalId: number | null = null;
│   │   │       
│   │   │       function updateMultiplayer() {
│   │   │         const ball = getBall();
│   │   │         const p1 = getPlayer1();
│   │   │         const p2 = getPlayer2();
│   │   │         const canvas = getCanvas();
│   │   │         if (!ball || !p1 || !p2 || !canvas) return;
│   │   │       
│   │   │         ball.x += ball.speedX;
│   │   │         ball.y += ball.speedY;
│   │   │       
│   │   │         if (ball.y - ball.radius < 0 || ball.y + ball.radius > canvas.height) ball.speedY *= -1;
│   │   │       
│   │   │         if (ball.x - ball.radius < 0) {
│   │   │           p2.score++; checkWinCondition(); resetBall();
│   │   │         } else if (ball.x + ball.radius > canvas.width) {
│   │   │           p1.score++; checkWinCondition(); resetBall();
│   │   │         }
│   │   │       
│   │   │         const player = (ball.x < canvas.width / 2) ? p1 : p2;
│   │   │         if (collides(ball, player)) {
│   │   │           const collidePoint = (ball.y - (player.y + player.height / 2)) / (player.height / 2);
│   │   │           const angleRad = (Math.PI / 4) * collidePoint;
│   │   │           const direction = (ball.x < canvas.width / 2) ? 1 : -1;
│   │   │           const speed = Math.sqrt(ball.speedX ** 2 + ball.speedY ** 2);
│   │   │           ball.speedX = direction * speed * Math.cos(angleRad);
│   │   │           ball.speedY = speed * Math.sin(angleRad);
│   │   │         }
│   │   │       
│   │   │         if (keys['w'] && p1.y > 0) p1.y -= PADDLE_SPEED;
│   │   │         if (keys['s'] && p1.y < canvas.height - p1.height) p1.y += PADDLE_SPEED;
│   │   │       
│   │   │         if (keys['ArrowUp'] && p2.y > 0) p2.y -= PADDLE_SPEED;
│   │   │         if (keys['ArrowDown'] && p2.y < canvas.height - p2.height) p2.y += PADDLE_SPEED;
│   │   │       }
│   │   │       
│   │   │       function increaseBallSpeed() {
│   │   │         const ball = getBall();
│   │   │         if (ball) {
│   │   │           ball.speedX *= 1.2;
│   │   │           ball.speedY *= 1.2;
│   │   │         }
│   │   │       }
│   │   │       
│   │   │       function checkWinCondition() {
│   │   │         const p1 = getPlayer1();
│   │   │         const p2 = getPlayer2();
│   │   │         if (p1.score >= WIN_SCORE || p2.score >= WIN_SCORE) {
│   │   │           alert(p1.score >= WIN_SCORE ? 'Jogador 1 ganhou!' : 'Jogador 2 ganhou!');
│   │   │           stopMultiplayerGame();
│   │   │           window.location.href = '/';
│   │   │         }
│   │   │       }
│   │   │       
│   │   │       function gameLoop() {
│   │   │         updateMultiplayer();
│   │   │         draw();
│   │   │         setAnimationFrameId(requestAnimationFrame(gameLoop));
│   │   │       }
│   │   │       
│   │   │       export function initMultiplayerGame() {
│   │   │         if (!initSharedState()) return;
│   │   │         resetBall();
│   │   │         speedIntervalId = setInterval(increaseBallSpeed, 3000);
│   │   │         gameLoop();
│   │   │       }
│   │   │       
│   │   │       export function stopMultiplayerGame() {
│   │   │         stopSharedState();
│   │   │         if (speedIntervalId) {
│   │   │           clearInterval(speedIntervalId);
│   │   │           speedIntervalId = null;
│   │   │         }
│   │   │       }
│   │   ├── game.ts
│   │   │   └── Conteúdo de game.ts:
│   │   │       import { initSinglePlayerGame, stopSinglePlayerGame } from './singleplayer';
│   │   │       import { initMultiplayerGame, stopMultiplayerGame } from './multiplayer';
│   │   │       import { initRemoteGame, stopRemoteGame } from './remote';
│   │   │       
│   │   │       let stopCurrentGame: () => void = () => {};
│   │   │       
│   │   │       export function initPongGame(mode: 'singleplayer' | 'multiplayer' | 'remote-multiplayer'): void {
│   │   │         stopPongGame();
│   │   │       
│   │   │         switch (mode) {
│   │   │           case 'singleplayer':
│   │   │             initSinglePlayerGame();
│   │   │             stopCurrentGame = stopSinglePlayerGame;
│   │   │             break;
│   │   │           case 'multiplayer':
│   │   │             initMultiplayerGame();
│   │   │             stopCurrentGame = stopMultiplayerGame;
│   │   │             break;
│   │   │           case 'remote-multiplayer':
│   │   │             initRemoteGame();
│   │   │             stopCurrentGame = stopRemoteGame;
│   │   │             break;
│   │   │         }
│   │   │       }
│   │   │       
│   │   │       export function stopPongGame(): void {
│   │   │         stopCurrentGame();
│   │   │         stopCurrentGame = () => {};
│   │   │       }
│   │   ├── singleplayer.ts
│   │   │   └── Conteúdo de singleplayer.ts:
│   │   │       import {
│   │   │         initSharedState, stopSharedState, draw, collides, resetBall, keys,
│   │   │         getCanvas, getBall, getPlayer1, getPlayer2, setAnimationFrameId,
│   │   │         PADDLE_SPEED, AI_SPEED, WIN_SCORE
│   │   │       } from './common';
│   │   │       
│   │   │       let speedIntervalId: number | null = null;
│   │   │       
│   │   │       function updateSinglePlayer() {
│   │   │         const ball = getBall();
│   │   │         const p1 = getPlayer1();
│   │   │         const p2 = getPlayer2();
│   │   │         const canvas = getCanvas();
│   │   │         if (!ball || !p1 || !p2 || !canvas) return;
│   │   │       
│   │   │         ball.x += ball.speedX;
│   │   │         ball.y += ball.speedY;
│   │   │       
│   │   │         if (ball.y - ball.radius < 0 || ball.y + ball.radius > canvas.height) ball.speedY *= -1;
│   │   │       
│   │   │         if (ball.x - ball.radius < 0) {
│   │   │           p2.score++; checkWinCondition(); resetBall();
│   │   │         } else if (ball.x + ball.radius > canvas.width) {
│   │   │           p1.score++; checkWinCondition(); resetBall();
│   │   │         }
│   │   │       
│   │   │         const player = (ball.x < canvas.width / 2) ? p1 : p2;
│   │   │         if (collides(ball, player)) {
│   │   │           const collidePoint = (ball.y - (player.y + player.height / 2)) / (player.height / 2);
│   │   │           const angleRad = (Math.PI / 4) * collidePoint;
│   │   │           const direction = (ball.x < canvas.width / 2) ? 1 : -1;
│   │   │           const speed = Math.sqrt(ball.speedX ** 2 + ball.speedY ** 2);
│   │   │           ball.speedX = direction * speed * Math.cos(angleRad);
│   │   │           ball.speedY = speed * Math.sin(angleRad);
│   │   │         }
│   │   │       
│   │   │         if (keys['w'] && p1.y > 0) p1.y -= PADDLE_SPEED;
│   │   │         if (keys['s'] && p1.y < canvas.height - p1.height) p1.y += PADDLE_SPEED;
│   │   │       
│   │   │         const targetY = ball.y - p2.height / 2;
│   │   │         const speed = AI_SPEED * (Math.random() * 0.5 + 0.75);
│   │   │         if (p2.y < targetY && p2.y < canvas.height - p2.height) p2.y += speed;
│   │   │         if (p2.y > targetY && p2.y > 0) p2.y -= speed;
│   │   │       }
│   │   │       
│   │   │       function increaseBallSpeed() {
│   │   │         const ball = getBall();
│   │   │         if (ball) {
│   │   │           ball.speedX *= 1.2;
│   │   │           ball.speedY *= 1.2;
│   │   │         }
│   │   │       }
│   │   │       
│   │   │       function checkWinCondition() {
│   │   │         const p1 = getPlayer1();
│   │   │         const p2 = getPlayer2();
│   │   │         if (p1.score >= WIN_SCORE || p2.score >= WIN_SCORE) {
│   │   │           alert(p1.score >= WIN_SCORE ? 'Você ganhou!' : 'Você perdeu!');
│   │   │           stopSinglePlayerGame();
│   │   │           window.location.href = '/';
│   │   │         }
│   │   │       }
│   │   │       
│   │   │       function gameLoop() {
│   │   │         updateSinglePlayer();
│   │   │         draw();
│   │   │         setAnimationFrameId(requestAnimationFrame(gameLoop));
│   │   │       }
│   │   │       
│   │   │       export function initSinglePlayerGame() {
│   │   │         if (!initSharedState()) return;
│   │   │         resetBall();
│   │   │         speedIntervalId = setInterval(increaseBallSpeed, 3000);
│   │   │         gameLoop();
│   │   │       }
│   │   │       
│   │   │       export function stopSinglePlayerGame() {
│   │   │         stopSharedState();
│   │   │         if (speedIntervalId) {
│   │   │           clearInterval(speedIntervalId);
│   │   │           speedIntervalId = null;
│   │   │         }
│   │   │       }
│   │   ├── common.ts
│   │   │   └── Conteúdo de common.ts:
│   │   │       export interface Paddle {
│   │   │         x: number; y: number; width: number; height: number; score: number;
│   │   │       }
│   │   │       export interface Ball {
│   │   │         x: number; y: number; radius: number; speedX: number; speedY: number;
│   │   │       }
│   │   │       
│   │   │       export const PADDLE_WIDTH = 15, PADDLE_HEIGHT = 100, BALL_RADIUS = 10;
│   │   │       export const PADDLE_SPEED = 8, AI_SPEED = 5;
│   │   │       export const WIN_SCORE = 3;
│   │   │       
│   │   │       let canvas: HTMLCanvasElement;
│   │   │       let ctx: CanvasRenderingContext2D;
│   │   │       let ball: Ball | null = null;
│   │   │       let player1: Paddle;
│   │   │       let player2: Paddle;
│   │   │       let animationFrameId: number | null = null;
│   │   │       let isWaiting = false;
│   │   │       
│   │   │       export const keys: { [key: string]: boolean } = {};
│   │   │       
│   │   │       export const getCanvas = () => canvas;
│   │   │       export const getCtx = () => ctx;
│   │   │       export const getBall = () => ball;
│   │   │       export const getPlayer1 = () => player1;
│   │   │       export const getPlayer2 = () => player2;
│   │   │       
│   │   │       export const setBall = (newBall: Ball | null) => { ball = newBall; };
│   │   │       export const setPlayer1 = (newP1: Paddle) => { player1 = newP1; };
│   │   │       export const setPlayer2 = (newP2: Paddle) => { player2 = newP2; };
│   │   │       export const setAnimationFrameId = (id: number | null) => { animationFrameId = id; };
│   │   │       export const setIsWaiting = (waiting: boolean) => { isWaiting = waiting; };
│   │   │       
│   │   │       export function keyDownHandler(e: KeyboardEvent) { keys[e.key] = true; }
│   │   │       export function keyUpHandler(e: KeyboardEvent) { keys[e.key] = false; }
│   │   │       
│   │   │       export function initSharedState(): boolean {
│   │   │         canvas = document.getElementById('pongCanvas') as HTMLCanvasElement;
│   │   │         if (!canvas) return false;
│   │   │         ctx = canvas.getContext('2d')!;
│   │   │       
│   │   │         player1 = { x: 10, y: canvas.height / 2 - PADDLE_HEIGHT / 2, width: PADDLE_WIDTH, height: PADDLE_HEIGHT, score: 0 };
│   │   │         player2 = { x: canvas.width - PADDLE_WIDTH - 10, y: canvas.height / 2 - PADDLE_HEIGHT / 2, width: PADDLE_WIDTH, height: PADDLE_HEIGHT, score: 0 };
│   │   │       
│   │   │         document.addEventListener('keydown', keyDownHandler);
│   │   │         document.addEventListener('keyup', keyUpHandler);
│   │   │         return true;
│   │   │       }
│   │   │       
│   │   │       export function stopSharedState(): void {
│   │   │         if (animationFrameId) {
│   │   │           cancelAnimationFrame(animationFrameId);
│   │   │           setAnimationFrameId(null);
│   │   │         }
│   │   │         document.removeEventListener('keydown', keyDownHandler);
│   │   │         document.removeEventListener('keyup', keyUpHandler);
│   │   │       }
│   │   │       
│   │   │       export function draw(): void {
│   │   │         if (!ctx) return;
│   │   │       
│   │   │         if (isWaiting) {
│   │   │           ctx.fillStyle = '#000';
│   │   │           ctx.fillRect(0, 0, canvas.width, canvas.height);
│   │   │           ctx.fillStyle = '#fff';
│   │   │           ctx.font = '24px "Press Start 2P"';
│   │   │           ctx.textAlign = 'center';
│   │   │           ctx.fillText('Aguardando oponente...', canvas.width / 2, canvas.height / 2);
│   │   │           ctx.textAlign = 'left';
│   │   │           return;
│   │   │         }
│   │   │       
│   │   │         ctx.fillStyle = '#000';
│   │   │         ctx.fillRect(0, 0, canvas.width, canvas.height);
│   │   │       
│   │   │         ctx.strokeStyle = '#fff';
│   │   │         ctx.setLineDash([10, 10]);
│   │   │         ctx.beginPath();
│   │   │         ctx.moveTo(canvas.width / 2, 0);
│   │   │         ctx.lineTo(canvas.width / 2, canvas.height);
│   │   │         ctx.stroke();
│   │   │         ctx.setLineDash([]);
│   │   │       
│   │   │         ctx.fillStyle = '#fff';
│   │   │         ctx.font = '45px "Press Start 2P"';
│   │   │         if (player1 && player2) {
│   │   │           ctx.fillText(player1.score.toString(), canvas.width / 4, 60);
│   │   │           ctx.fillText(player2.score.toString(), 3 * canvas.width / 4, 60);
│   │   │           ctx.fillRect(player1.x, player1.y, player1.width, player1.height);
│   │   │           ctx.fillRect(player2.x, player2.y, player2.width, player2.height);
│   │   │         }
│   │   │       
│   │   │         if (ball) {
│   │   │           ctx.beginPath();
│   │   │           ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
│   │   │           ctx.fill();
│   │   │         }
│   │   │       }
│   │   │       
│   │   │       export function collides(b: Ball, p: Paddle): boolean {
│   │   │         return b.x - b.radius < p.x + p.width && b.x + b.radius > p.x &&
│   │   │                b.y - b.radius < p.y + p.height && b.y + b.radius > p.y;
│   │   │       }
│   │   │       
│   │   │       export function resetBall(): void {
│   │   │         if (!canvas) return;
│   │   │         ball = {
│   │   │           x: canvas.width / 2,
│   │   │           y: canvas.height / 2,
│   │   │           radius: BALL_RADIUS,
│   │   │           speedX: (Math.random() > 0.5 ? 1 : -1) * 5,
│   │   │           speedY: Math.random() * 6 - 3
│   │   │         };
│   │   │       }
│   ├── config
│   │   ├── routes.ts
│   │   │   └── Conteúdo de routes.ts:
│   │   │       import { initPongGame } from '../pong/game';
│   │   │       import { initRpsGame } from '../rps/game';
│   │   │       import { showProfile } from '../pages/profile';
│   │   │       import { showPlayerSelection } from '../pages/playerSelection';
│   │   │       
│   │   │       export const routes = [
│   │   │         { path: '/login', view: 'login' },
│   │   │         { path: '/', view: 'mainMenu' },
│   │   │         { path: '/pong', view: 'pongModeSelection' },
│   │   │         { path: '/pong/singleplayer', view: 'pongGame', action: () => initPongGame('singleplayer') },
│   │   │         { path: '/pong/multiplayer', view: 'pongGame', action: () => initPongGame('multiplayer') },
│   │   │         { path: '/pong/remote-multiplayer', view: 'playerSelection', action: showPlayerSelection },
│   │   │         { path: '/rps', view: 'rps', action: initRpsGame },
│   │   │         { path: '/creators', view: 'creators' },
│   │   │         { path: '/profile', view: 'profile', action: showProfile },
│   │   │       ];
│   ├── rps
│   │   ├── game.ts
│   │   │   └── Conteúdo de game.ts:
│   │   │       import { t } from '../i18n';
│   │   │       
│   │   │       type Choice = 'rock' | 'paper' | 'scissors';
│   │   │       type Outcome = 'win' | 'lose' | 'draw';
│   │   │       
│   │   │       const choices: Choice[] = ['rock', 'paper', 'scissors'];
│   │   │       const winRules: Record<Choice, Choice> = {
│   │   │         rock: 'scissors', paper: 'rock', scissors: 'paper',
│   │   │       };
│   │   │       const choiceEmojis: Record<Choice, string> = {
│   │   │         rock: '🗿', paper: '📄', scissors: '✂️',
│   │   │       };
│   │   │       
│   │   │       let playerScore = 0;
│   │   │       let computerScore = 0;
│   │   │       
│   │   │       let playerScoreEl: HTMLSpanElement, computerScoreEl: HTMLSpanElement, resultTextEl: HTMLParagraphElement, choicesDisplayEl: HTMLDivElement;
│   │   │       
│   │   │       function getComputerChoice(): Choice {
│   │   │         return choices[Math.floor(Math.random() * choices.length)];
│   │   │       }
│   │   │       
│   │   │       function updateScore(outcome: Outcome) {
│   │   │         const texts = t();
│   │   │         if (outcome === 'win') {
│   │   │           playerScore++;
│   │   │           resultTextEl.textContent = texts.win;
│   │   │           resultTextEl.className = 'text-2xl font-semibold h-8 mt-2 text-green-400';
│   │   │         } else if (outcome === 'lose') {
│   │   │           computerScore++;
│   │   │           resultTextEl.textContent = texts.lose;
│   │   │           resultTextEl.className = 'text-2xl font-semibold h-8 mt-2 text-red-400';
│   │   │         } else {
│   │   │           resultTextEl.textContent = texts.draw;
│   │   │           resultTextEl.className = 'text-2xl font-semibold h-8 mt-2 text-gray-400';
│   │   │         }
│   │   │         playerScoreEl.textContent = playerScore.toString();
│   │   │         computerScoreEl.textContent = computerScore.toString();
│   │   │       }
│   │   │       
│   │   │       function handlePlayerChoice(event: Event) {
│   │   │         const target = event.currentTarget as HTMLButtonElement;
│   │   │         const playerChoice = target.dataset.choice as Choice;
│   │   │         const computerChoice = getComputerChoice();
│   │   │         const outcome = (playerChoice === computerChoice) ? 'draw' : (winRules[playerChoice] === computerChoice ? 'win' : 'lose');
│   │   │         
│   │   │         choicesDisplayEl.innerHTML = `Você: <span class="text-2xl">${choiceEmojis[playerChoice]}</span> vs CPU: <span class="text-2xl">${choiceEmojis[computerChoice]}</span>`;
│   │   │         updateScore(outcome);
│   │   │       }
│   │   │       
│   │   │       export function initRpsGame() {
│   │   │         playerScore = 0;
│   │   │         computerScore = 0;
│   │   │         
│   │   │         playerScoreEl = document.getElementById('player-score') as HTMLSpanElement;
│   │   │         computerScoreEl = document.getElementById('computer-score') as HTMLSpanElement;
│   │   │         resultTextEl = document.getElementById('result-text') as HTMLParagraphElement;
│   │   │         choicesDisplayEl = document.getElementById('choices-display') as HTMLDivElement;
│   │   │       
│   │   │         document.querySelectorAll('.choice-btn').forEach(button => {
│   │   │           button.addEventListener('click', handlePlayerChoice);
│   │   │         });
│   │   │       }
│   ├── styles.css
│   │   └── Conteúdo de styles.css:
│   │       @tailwind base;
│   │       @tailwind components;
│   │       @tailwind utilities;
│   │       
│   │       @layer components {
│   │         .menu-button {
│   │           @apply bg-gray-700 text-white font-press-start text-lg py-4 px-8 m-2 border-2 border-white rounded-lg cursor-pointer uppercase transition-all duration-200 hover:bg-indigo-600 hover:-translate-y-0.5 hover:shadow-retro-hover;
│   │         }
│   │       
│   │         .text-glow {
│   │           text-shadow: 0 0 10px #4f46e5, 0 0 20px #4f46e5;
│   │         }
│   │       }
│   ├── core
│   │   ├── router.ts
│   │   │   └── Conteúdo de router.ts:
│   │   │       import { routes } from '../config/routes';
│   │   │       import { renderView } from './view';
│   │   │       import { stopPongGame } from '../pong/game';
│   │   │       import { initializeGoogleButton } from '../auth/auth';
│   │   │       import { logout } from '../auth/auth';
│   │   │       
│   │   │       const appContainer = document.getElementById('app') as HTMLDivElement;
│   │   │       
│   │   │       export async function router() {
│   │   │         const path = window.location.pathname;
│   │   │       
│   │   │         stopPongGame();
│   │   │         appContainer.innerHTML = `<h1>Carregando...</h1>`;
│   │   │       
│   │   │         const token = localStorage.getItem('jwtToken');
│   │   │         const isProtectedRoute = !['/login'].includes(path);
│   │   │       
│   │   │         if (!token && isProtectedRoute) {
│   │   │           history.pushState({}, '', '/login');
│   │   │           await router();
│   │   │           return;
│   │   │         }
│   │   │       
│   │   │         if (token && path === '/login') {
│   │   │           history.pushState({}, '', '/');
│   │   │           await router();
│   │   │           return;
│   │   │         }
│   │   │       
│   │   │         const route = routes.find(r => r.path === path);
│   │   │       
│   │   │         if (route) {
│   │   │           if (route.path === '/profile' && route.action) {
│   │   │             appContainer.innerHTML = await (route.action as Function)();
│   │   │           } else {
│   │   │             appContainer.innerHTML = await renderView(route.view);
│   │   │             if (route.action) {
│   │   │               (route.action as Function)();
│   │   │             }
│   │   │           }
│   │   │       
│   │   │           if (route.view === 'login') {
│   │   │             initializeGoogleButton();
│   │   │           }
│   │   │         } else {
│   │   │           appContainer.innerHTML = await renderView('404');
│   │   │         }
│   │   │       }
│   │   │       
│   │   │       document.body.addEventListener('click', (e) => {
│   │   │         const target = e.target as HTMLElement;
│   │   │         const navLink = target.closest('[data-navigate]');
│   │   │         if (navLink) {
│   │   │           e.preventDefault();
│   │   │           const path = navLink.getAttribute('data-navigate')!;
│   │   │           history.pushState({}, '', path);
│   │   │           router();
│   │   │         }
│   │   │       });
│   │   │       
│   │   │       window.addEventListener('popstate', router);
│   │   │       window.addEventListener('auth-error', logout);
│   │   ├── view.ts
│   │   │   └── Conteúdo de view.ts:
│   │   │       import { t } from '../i18n';
│   │   │       
│   │   │       export function simpleTemplate(html: string, data: object): string {
│   │   │         const context = { ...t(), ...data };
│   │   │         return html.replace(/{{(.*?)}}/g, (match, key) => {
│   │   │           const prop = key.trim();
│   │   │           const value = prop.split('.').reduce((acc: any, part: string) => acc && acc[part], context);
│   │   │           return value !== undefined ? String(value) : match;
│   │   │         });
│   │   │       }
│   │   │       
│   │   │       export async function renderView(viewName: string, data: object = {}): Promise<string> {
│   │   │         try {
│   │   │           const response = await fetch(`/pages/${viewName}.html`);
│   │   │           if (!response.ok) throw new Error(`View not found: ${viewName}`);
│   │   │           const htmlTemplate = await response.text();
│   │   │           return simpleTemplate(htmlTemplate, data);
│   │   │         } catch (error) {
│   │   │           console.error('Failed to render view:', error);
│   │   │           return `
│   │   │             <h1>Erro ao carregar a página</h1>
│   │   │             <p>Não foi possível encontrar o conteúdo solicitado.</p>
│   │   │             <button class="menu-button" data-navigate="/">Voltar ao Menu</button>
│   │   │           `;
│   │   │         }
│   │   │       }
│   ├── api
│   │   ├── api.ts
│   │   │   └── Conteúdo de api.ts:
│   │   │       import { API_BASE_URL } from '../utils/constants';
│   │   │       
│   │   │       export async function fetchWithAuth(url: string, options: RequestInit = {}): Promise<Response> {
│   │   │         const token = localStorage.getItem('jwtToken');
│   │   │         const headers = new Headers(options.headers || {});
│   │   │         if (token) {
│   │   │           headers.append('Authorization', `Bearer ${token}`);
│   │   │         }
│   │   │       
│   │   │         const response = await fetch(`${API_BASE_URL}${url}`, {
│   │   │           ...options,
│   │   │           headers,
│   │   │         });
│   │   │       
│   │   │         if (response.status === 401) {
│   │   │           window.dispatchEvent(new Event('auth-error'));
│   │   │         }
│   │   │       
│   │   │         return response;
│   │   │       }
│   ├── i18n.ts
│   │   └── Conteúdo de i18n.ts:
│   │       type Language = 'pt-BR' | 'en' | 'es' | 'fr';
│   │       
│   │       const translations = {
│   │         'pt-BR': {
│   │           // Menu Principal
│   │           mainMenuTitle: 'TRANSCENDENCE',
│   │           playPongButton: 'Jogar Pong',
│   │           playRpsButton: 'Pedra, Papel, Tesoura',
│   │           profileLink: 'Perfil',
│   │           creatorsLink: 'Conheça nossos criadores!',
│   │       
│   │           // Seleção Pong
│   │           pongTitle: 'PONG',
│   │           selectMode: 'Selecione o modo de jogo:',
│   │           singlePlayer: 'Single Player',
│   │           multiplayer: 'Multiplayer',
│   │           backToMenu: 'Voltar ao Menu',
│   │       
│   │           // Jogo Pong
│   │           pongInstructions: 'P1: W/S | P2: ↑/↓',
│   │       
│   │           // Jogo RPS
│   │           rpsTitle: 'Pedra, Papel & Tesoura',
│   │           player: 'Você',
│   │           cpu: 'CPU',
│   │           yourTurn: 'Faça sua jogada:',
│   │           win: 'Você Ganhou!',
│   │           lose: 'Você Perdeu!',
│   │           draw: 'Empate!',
│   │       
│   │           // Página de Perfil
│   │           profileTitle: 'Nome',
│   │           profileText: 'Informações básicas do usuário.',
│   │           matchesPlayed: 'Partidas jogadas',
│   │           wins: 'Vitórias',
│   │           loses: 'Derrotas',
│   │           lastLogin: 'Último login',
│   │       
│   │           // Página de Criadores
│   │           creatorsTitle: 'Criadores',
│   │           creatorsText: 'Este projeto foi criado por...',    
│   │         },
│   │         'en': {
│   │           // Main Menu
│   │           mainMenuTitle: 'TRANSCENDENCE',
│   │           playPongButton: 'Play Pong',
│   │           playRpsButton: 'Rock, Paper, Scissors',
│   │           profileLink: 'Profile',
│   │           creatorsLink: 'Meet our creators!',
│   │       
│   │           // Pong Selection
│   │           pongTitle: 'PONG',
│   │           selectMode: 'Select game mode:',
│   │           singlePlayer: 'Single Player',
│   │           multiplayer: 'Multiplayer',
│   │           backToMenu: 'Back to Menu',
│   │       
│   │           // Pong Game
│   │           pongInstructions: 'P1: W/S | P2: ↑/↓',
│   │       
│   │           // RPS Game
│   │           rpsTitle: 'Rock, Paper & Scissors',
│   │           player: 'You',
│   │           cpu: 'CPU',
│   │           yourTurn: 'Make your move:',
│   │           win: 'You Win!',
│   │           lose: 'You Lose!',
│   │           draw: 'Draw!',
│   │       
│   │           // Profile Page
│   │           profileTitle: 'Profile',
│   │           profileText: 'Basic user information.',
│   │           matchesPlayed: 'Matches Played',
│   │           wins: 'Wins',
│   │           loses: 'Defeats',
│   │           lastLogin: 'Last login',
│   │       
│   │           // Creators Page
│   │           creatorsTitle: 'Creators',
│   │           creatorsText: 'This project was created by...',
│   │         },
│   │         'es': {
│   │           // Menú Principal
│   │           mainMenuTitle: 'TRANSCENDENCE',
│   │           playPongButton: 'Jugar Pong',
│   │           playRpsButton: 'Piedra, Papel, Tijeras',
│   │           profileLink: 'Perfil',
│   │           creatorsLink: '¡Conoce a nuestros creadores!',
│   │       
│   │           // Selección Pong
│   │           pongTitle: 'PONG',
│   │           selectMode: 'Selecciona el modo de juego:',
│   │           singlePlayer: 'Un jugador',
│   │           multiplayer: 'Multijugador',
│   │           backToMenu: 'Volver al menú',
│   │       
│   │           // Juego Pong
│   │           pongInstructions: 'P1: W/S | P2: ↑/↓',
│   │       
│   │           // Juego RPS
│   │           rpsTitle: 'Piedra, Papel y Tijeras',
│   │           player: 'Tú',
│   │           cpu: 'CPU',
│   │           yourTurn: 'Haz tu jugada:',
│   │           win: '¡Ganaste!',
│   │           lose: '¡Perdiste!',
│   │           draw: '¡Empate!',
│   │       
│   │           // Página de Perfil
│   │           profileTitle: 'Perfil',
│   │           profileText: 'Información básica del usuario.',
│   │           matchesPlayed: 'Partidas jugadas',
│   │           wins: 'Victorias',
│   │           loses: 'Derrotas',
│   │           lastLogin: 'Último inicio de sesión',
│   │       
│   │           // Página de Creadores
│   │           creatorsTitle: 'Creadores',
│   │           creatorsText: 'Este proyecto fue creado por...',
│   │         },
│   │         'fr': {
│   │           // Menu Principal
│   │           mainMenuTitle: 'TRANSCENDENCE',
│   │           playPongButton: 'Jouer au Pong',
│   │           playRpsButton: 'Pierre, Papier, Ciseaux',
│   │           profileLink: 'Profil',
│   │           creatorsLink: 'Rencontrez nos créateurs !',
│   │       
│   │           // Sélection Pong
│   │           pongTitle: 'PONG',
│   │           selectMode: 'Sélectionnez le mode de jeu :',
│   │           singlePlayer: 'Un joueur',
│   │           multiplayer: 'Multijoueur',
│   │           backToMenu: 'Retour au menu',
│   │       
│   │           // Jeu Pong
│   │           pongInstructions: 'J1 : W/S | J2 : ↑/↓',
│   │       
│   │           // Jeu RPS
│   │           rpsTitle: 'Pierre, Papier & Ciseaux',
│   │           player: 'Vous',
│   │           cpu: 'CPU',
│   │           yourTurn: 'Faites votre choix :',
│   │           win: 'Vous avez gagné !',
│   │           lose: 'Vous avez perdu !',
│   │           draw: 'Égalité !',
│   │       
│   │           // Page de Profil
│   │           profileTitle: 'Profil',
│   │           profileText: 'Informations de base sur l’utilisateur.',
│   │           matchesPlayed: 'Parties jouées',
│   │           wins: 'Victoires',
│   │           loses: 'Défaites',
│   │           lastLogin: 'Dernière connexion',
│   │       
│   │           // Page des Créateurs
│   │           creatorsTitle: 'Créateurs',
│   │           creatorsText: 'Ce projet a été créé par...',
│   │         }
│   │       };
│   │       
│   │       let currentLanguage: Language = 'pt-BR';
│   │       
│   │       export function toggleLanguage(): void {
│   │         const langs: Language[] = ['pt-BR', 'en', 'es', 'fr'];
│   │         const nextIndex = (langs.indexOf(currentLanguage) + 1) % langs.length;
│   │         currentLanguage = langs[nextIndex];
│   │       }
│   │       
│   │       export function getCurrentLanguage(): Language {
│   │         return currentLanguage;
│   │       }
│   │       
│   │       export function t() {
│   │         return translations[currentLanguage];
│   │       }
│   ├── main.ts
│   │   └── Conteúdo de main.ts:
│   │       import './styles.css';
│   │       import { router } from './core/router';
│   │       import { initLangSwitcher, updateLangSwitcher } from './components/langSwitcher';
│   │       import { updateProfileLink } from './components/profileLink';
│   │       
│   │       function initializeApp() {
│   │         updateLangSwitcher();
│   │         updateProfileLink();
│   │         initLangSwitcher();
│   │         router();
│   │       }
│   │       
│   │       document.addEventListener('DOMContentLoaded', initializeApp);
│   ├── components
│   │   ├── langSwitcher.ts
│   │   │   └── Conteúdo de langSwitcher.ts:
│   │   │       import { getCurrentLanguage, toggleLanguage } from '../i18n';
│   │   │       import { router } from '../core/router';
│   │   │       import { updateProfileLink } from './profileLink';
│   │   │       
│   │   │       const langContainer = document.getElementById('lang-switcher-container') as HTMLDivElement;
│   │   │       
│   │   │       export function updateLangSwitcher() {
│   │   │         const lang = getCurrentLanguage();
│   │   │         langContainer.innerHTML = `
│   │   │           <button class="bg-gray-700 p-2 rounded-md border-2 border-white text-sm hover:bg-indigo-600 transition-colors">
│   │   │             ${lang}
│   │   │           </button>
│   │   │         `;
│   │   │       }
│   │   │       
│   │   │       export function initLangSwitcher() {
│   │   │         langContainer.addEventListener('click', () => {
│   │   │           toggleLanguage();
│   │   │           updateLangSwitcher();
│   │   │           updateProfileLink();
│   │   │           router();
│   │   │         });
│   │   │       }
│   │   ├── profileLink.ts
│   │   │   └── Conteúdo de profileLink.ts:
│   │   │       import { t } from '../i18n';
│   │   │       
│   │   │       const profileContainer = document.getElementById('profile-link-container') as HTMLDivElement;
│   │   │       
│   │   │       export function updateProfileLink() {
│   │   │         const texts = t();
│   │   │         const token = localStorage.getItem('jwtToken');
│   │   │         if (token) {
│   │   │           profileContainer.innerHTML = `<a href="/profile" class="text-white hover:text-indigo-400 transition-colors text-sm" data-navigate="/profile">${texts.profileLink}</a>`;
│   │   │         } else {
│   │   │           profileContainer.innerHTML = '';
│   │   │         }
│   │   │       }
│   ├── utils
│   │   ├── constants.ts
│   │   │   └── Conteúdo de constants.ts:
│   │   │       export const API_BASE_URL = 'http://localhost:8080/api';
│   │   │       export const GOOGLE_CLIENT_ID = '298539346397-imm2ctlgievdlfb7vff3pdsh2291itjk.apps.googleusercontent.com';
│   ├── pages
│   │   ├── profile.ts
│   │   │   └── Conteúdo de profile.ts:
│   │   │       import { fetchWithAuth } from '../api/api';
│   │   │       import { logout } from '../auth/auth';
│   │   │       import { renderView } from '../core/view';
│   │   │       import { getCurrentLanguage } from '../i18n';
│   │   │       
│   │   │       export async function showProfile(): Promise<string> {
│   │   │           try {
│   │   │               const response = await fetchWithAuth('/users/me');
│   │   │       
│   │   │               if (!response.ok) {
│   │   │                   throw new Error('Falha ao buscar dados do usuário.');
│   │   │               }
│   │   │       
│   │   │               const user = await response.json();
│   │   │               user.ProfilePic = user.ProfilePic || 'https://placehold.co/128x128/000000/FFFFFF?text=User';
│   │   │               
│   │   │               user.statusText = user.isOnline ? 'Online' : 'Offline';
│   │   │               user.statusColor = user.isOnline ? 'text-green-500' : 'text-red-500';
│   │   │       
│   │   │               if (user.lastLogin) {
│   │   │                   const lang = getCurrentLanguage();
│   │   │                   const date = new Date(user.lastLogin);
│   │   │                   user.formattedLastLogin = date.toLocaleString(lang, {
│   │   │                       year: 'numeric', month: '2-digit', day: '2-digit',
│   │   │                       hour: '2-digit', minute: '2-digit', second: '2-digit'
│   │   │                   });
│   │   │               } else {
│   │   │                   user.formattedLastLogin = 'Nunca';
│   │   │               }
│   │   │       
│   │   │               const viewHtml = await renderView('profile', { user });
│   │   │               
│   │   │               setTimeout(() => {
│   │   │                   document.getElementById('logout-button')?.addEventListener('click', logout);
│   │   │               }, 0);
│   │   │               
│   │   │               return viewHtml;
│   │   │           } catch (error: any) {
│   │   │               console.error("Erro detalhado ao carregar perfil:", error);
│   │   │               return await renderView('error', { message: error.message });
│   │   │           }
│   │   │       }
│   │   ├── playerSelection.ts
│   │   │   └── Conteúdo de playerSelection.ts:
│   │   │       import { fetchWithAuth } from '../api/api';
│   │   │       import { renderView } from '../core/view';
│   │   │       import { initRemoteGame } from '../pong/remote';
│   │   │       
│   │   │       async function fetchUsers() {
│   │   │         const response = await fetchWithAuth('/users');
│   │   │         if (!response.ok) {
│   │   │           throw new Error('Falha ao buscar usuários.');
│   │   │         }
│   │   │         return response.json();
│   │   │       }
│   │   │       
│   │   │       function handleInviteClick(event: Event) {
│   │   │         const button = event.currentTarget as HTMLButtonElement;
│   │   │         const opponentUuid = button.dataset.uuid;
│   │   │         if (opponentUuid) {
│   │   │           alert(`Convite enviado para o usuário ${opponentUuid}! (Funcionalidade em desenvolvimento)`);
│   │   │           window.history.pushState({}, '', '/pong/remote-multiplayer');
│   │   │           initRemoteGame(opponentUuid);
│   │   │         }
│   │   │       }
│   │   │       
│   │   │       export async function showPlayerSelection(): Promise<string> {
│   │   │         try {
│   │   │           const users = await fetchUsers();
│   │   │           const currentUserResponse = await fetchWithAuth('/users/me');
│   │   │           if (!currentUserResponse.ok) throw new Error('Falha ao buscar dados do usuário atual.');
│   │   │           const currentUser = await currentUserResponse.json();
│   │   │       
│   │   │           let playerListHtml = '';
│   │   │           for (const user of users) {
│   │   │             if (user.Uuid !== currentUser.Uuid) {
│   │   │               playerListHtml += `
│   │   │                 <div class="bg-slate-800 p-4 rounded-lg flex items-center justify-between">
│   │   │                   <div class="flex items-center">
│   │   │                     <img src="${user.ProfilePic || 'https://placehold.co/64x64/000000/FFFFFF?text=User'}" alt="Foto de Perfil" class="w-16 h-16 rounded-full mr-4">
│   │   │                     <span class="text-white">${user.Username}</span>
│   │   │                   </div>
│   │   │                   <button class="menu-button invite-button" data-uuid="${user.Uuid}">Convidar</button>
│   │   │                 </div>
│   │   │               `;
│   │   │             }
│   │   │           }
│   │   │       
│   │   │           const viewHtml = await renderView('playerSelection', {});
│   │   │           const tempDiv = document.createElement('div');
│   │   │           tempDiv.innerHTML = viewHtml;
│   │   │       
│   │   │           const playerListContainer = tempDiv.querySelector('#player-list');
│   │   │           if (playerListContainer) {
│   │   │             playerListContainer.innerHTML = playerListHtml;
│   │   │           }
│   │   │       
│   │   │           setTimeout(() => {
│   │   │             document.querySelectorAll('.invite-button').forEach(button => {
│   │   │               button.addEventListener('click', handleInviteClick as EventListener);
│   │   │             });
│   │   │           }, 0);
│   │   │       
│   │   │           return tempDiv.innerHTML;
│   │   │         } catch (error: any) {
│   │   │           console.error("Erro ao carregar a seleção de jogadores:", error);
│   │   │           return await renderView('error', { message: error.message });
│   │   │         }
│   │   │       }
│   ├── auth
│   │   ├── auth.ts
│   │   │   └── Conteúdo de auth.ts:
│   │   │       import { API_BASE_URL, GOOGLE_CLIENT_ID } from '../utils/constants';
│   │   │       import { updateProfileLink } from '../components/profileLink';  
│   │   │       
│   │   │       declare global {
│   │   │         interface Window {
│   │   │           google: {
│   │   │             accounts: {
│   │   │               id: {
│   │   │                 initialize: (config: {
│   │   │                   client_id: string;
│   │   │                   callback: (response: any) => void;
│   │   │                 }) => void;
│   │   │                 renderButton: (
│   │   │                   element: HTMLElement,
│   │   │                   options: {
│   │   │                     theme: string;
│   │   │                     size: string;
│   │   │                     type: string;
│   │   │                   }
│   │   │                 ) => void;
│   │   │               };
│   │   │             };
│   │   │           };
│   │   │         }
│   │   │       }
│   │   │       
│   │   │       
│   │   │       function navigateTo(path: string) {
│   │   │         history.pushState({}, '', path);
│   │   │         window.dispatchEvent(new PopStateEvent('popstate'));
│   │   │       }
│   │   │       
│   │   │       export function logout() {
│   │   │         localStorage.removeItem('jwtToken');
│   │   │         updateProfileLink();
│   │   │         navigateTo('/login');
│   │   │       }
│   │   │       
│   │   │       async function handleGoogleCredentialResponse(response: any) {
│   │   │         try {
│   │   │           const res = await fetch(`${API_BASE_URL}/auth/google`, {
│   │   │             method: 'POST',
│   │   │             headers: { 'Content-Type': 'application/json' },
│   │   │             body: JSON.stringify({ credential: response.credential }),
│   │   │           });
│   │   │       
│   │   │           if (res.ok) {
│   │   │             const { token } = await res.json();
│   │   │             localStorage.setItem('jwtToken', token);
│   │   │             updateProfileLink();
│   │   │             navigateTo('/');
│   │   │           } else {
│   │   │             const errorData = await res.json();
│   │   │             alert(`Falha no login: ${errorData.message}`);
│   │   │           }
│   │   │         } catch (err) {
│   │   │           console.error("Erro ao tentar fazer login:", err);
│   │   │           alert("Erro de rede. Não foi possível conectar ao servidor.");
│   │   │         }
│   │   │       }
│   │   │       
│   │   │       export function initializeGoogleButton() {
│   │   │         let attempts = 0;
│   │   │         const maxAttempts = 100;
│   │   │       
│   │   │         const checkGoogleReady = setInterval(() => {
│   │   │           const googleSignInElement = document.getElementById("g_id_signin");
│   │   │           if (typeof window.google !== 'undefined' && window.google.accounts && googleSignInElement) {
│   │   │             clearInterval(checkGoogleReady);
│   │   │             try {
│   │   │               window.google.accounts.id.initialize({
│   │   │                 client_id: GOOGLE_CLIENT_ID,
│   │   │                 callback: handleGoogleCredentialResponse
│   │   │               });
│   │   │               window.google.accounts.id.renderButton(
│   │   │                 googleSignInElement,
│   │   │                 { theme: "outline", size: "large", type: 'standard' }
│   │   │               );
│   │   │             } catch (error) {
│   │   │               console.error("Erro ao inicializar o Google Sign-In:", error);
│   │   │             }
│   │   │           } else {
│   │   │             attempts++;
│   │   │             if (attempts > maxAttempts) {
│   │   │               clearInterval(checkGoogleReady);
│   │   │               console.error("A API do Google não carregou a tempo ou o elemento 'g_id_signin' não foi encontrado.");
│   │   │             }
│   │   │           }
│   │   │         }, 100);
│   │   │       }
├── .postcssrc.js
│   └── Conteúdo de .postcssrc.js:
│       export default {
│         plugins: {
│           tailwindcss: {},
│           autoprefixer: {},
│         },
│       }
├── .gitkeep
│   └── Conteúdo de .gitkeep:
├── Dockerfile
│   └── Conteúdo de Dockerfile:
│       FROM node:20-alpine AS build-stage
│       WORKDIR /app
│       
│       COPY frontend/package.json frontend/yarn.lock* frontend/package-lock.json* ./
│       RUN npm install
│       
│       COPY frontend/. .
│       RUN npm run build
│       
│       FROM nginx:1.27-alpine
│       RUN rm /etc/nginx/conf.d/default.conf
│       
│       COPY nginx/frontend.conf /etc/nginx/conf.d/default.conf
│       COPY --from=build-stage /app/dist /usr/share/nginx/html
│       
│       EXPOSE 80
├── img
│   ├── cachorrao.jpg
│   │   [Erro ao ler o arquivo: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte]
├── index.html
│   └── Conteúdo de index.html:
│       <!DOCTYPE html>
│       <html lang="pt-br">
│         <head>
│           <meta charset="UTF-8" />
│           <meta name="viewport" content="width=device-width, initial-scale=1.0" />
│           <title>Transcendence</title>
│           <link rel="preconnect" href="https://fonts.googleapis.com" />
│           <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
│           <link
│             href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap"
│             rel="stylesheet"
│           />
│           <script src="https://accounts.google.com/gsi/client" async defer></script>
│         </head>
│         <body class="bg-gray-900 text-white font-press-start flex items-center justify-center min-h-screen">
│           
│           <div id="lang-switcher-container" class="absolute top-4 left-4 z-10"></div>
│           <div id="profile-link-container" class="absolute top-4 right-4 z-10"></div>
│           
│           <div id="app" class="text-center w-full max-w-4xl mx-auto">
│           </div>
│       
│           <script type="module" src="/src/main.ts"></script>
│         </body>
│       </html>
├── public
│   ├── pages
│   │   ├── login.html
│   │   │   └── Conteúdo de login.html:
│   │   │       <div class="w-full h-screen flex items-center justify-center">
│   │   │         <div class="text-center p-10 bg-slate-800 rounded-xl shadow-retro">
│   │   │           <h1 class="text-6xl mb-16 text-glow">Bem-vindo ao Transcendence!</h1>
│   │   │           <p class="text-lg mb-12">Faça login com sua conta do Google para continuar.</p>
│   │   │       
│   │   │           <div id="g_id_signin" class="flex justify-center"></div>
│   │   │         </div>
│   │   │       </div>
│   │   ├── playerSelection.html
│   │   │   └── Conteúdo de playerSelection.html:
│   │   │       <div>
│   │   │         <h1 class="text-4xl text-glow mb-8">Escolha um oponente</h1>
│   │   │         <div id="player-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
│   │   │           </div>
│   │   │         <button class="menu-button mt-8" data-navigate="/pong">{{backToMenu}}</button>
│   │   │       </div>
│   │   ├── rps.html
│   │   │   └── Conteúdo de rps.html:
│   │   │       <div class="bg-slate-800 p-8 rounded-xl shadow-2xl w-full max-w-md text-center mx-auto">
│   │   │         <h2 class="text-3xl font-bold mb-4 text-teal-400">{{rpsTitle}}</h2>
│   │   │         <div class="flex justify-around items-center bg-slate-700 rounded-lg p-4 mb-6 text-lg">
│   │   │           <div class="flex flex-col"><span class="font-bold text-2xl" id="player-score">0</span><span>{{player}}</span></div>
│   │   │           <div class="font-bold text-2xl">:</div>
│   │   │           <div class="flex flex-col"><span class="font-bold text-2xl" id="computer-score">0</span><span>{{cpu}}</span></div>
│   │   │         </div>
│   │   │         <div class="h-24 flex flex-col justify-center items-center mb-6">
│   │   │             <div id="choices-display" class="text-xl h-8"></div>
│   │   │             <p id="result-text" class="text-2xl font-semibold h-8 mt-2"></p>
│   │   │         </div>
│   │   │         <p class="mb-4 text-gray-300">{{yourTurn}}</p>
│   │   │         <div class="flex justify-center gap-4">
│   │   │             <button data-choice="rock" class="choice-btn bg-cyan-500 hover:bg-cyan-600 p-4 rounded-full text-4xl transition-transform duration-200 hover:scale-110">🗿</button>
│   │   │             <button data-choice="paper" class="choice-btn bg-pink-500 hover:bg-pink-600 p-4 rounded-full text-4xl transition-transform duration-200 hover:scale-110">📄</button>
│   │   │             <button data-choice="scissors" class="choice-btn bg-yellow-500 hover:bg-yellow-600 p-4 rounded-full text-4xl transition-transform duration-200 hover:scale-110">✂️</button>
│   │   │         </div>
│   │   │         <div class="mt-8">
│   │   │             <button class="menu-button" data-navigate="/">{{backToMenu}}</button>
│   │   │         </div>
│   │   │       </div>
│   │   ├── mainMenu.html
│   │   │   └── Conteúdo de mainMenu.html:
│   │   │       <div class="w-full relative">
│   │   │         <h1 class="text-5xl mb-8 text-glow">{{mainMenuTitle}}</h1>
│   │   │         <div class="flex flex-col items-center">
│   │   │           <button class="menu-button" data-navigate="/pong">{{playPongButton}}</button>
│   │   │           <button class="menu-button" data-navigate="/rps">{{playRpsButton}}</button>
│   │   │       
│   │   │           <a href="/creators" class="mt-8 text-gray-400 hover:text-white transition-colors" data-navigate="/creators">{{creatorsLink}}</a>
│   │   │         </div>
│   │   │       </div>
│   │   ├── 404.html
│   │   │   └── Conteúdo de 404.html:
│   │   │       <div>
│   │   │           <h1 class="text-6xl text-glow">404</h1>
│   │   │           <p class="text-xl mt-4 mb-8">Página não encontrada!</p>
│   │   │           <button class="menu-button" data-navigate="/">{{backToMenu}}</button>
│   │   │       </div>
│   │   ├── pongModeSelection.html
│   │   │   └── Conteúdo de pongModeSelection.html:
│   │   │       <div>
│   │   │         <h1 class="text-4xl mb-8 text-glow">{{pongTitle}}</h1>
│   │   │         <p class="mb-4">{{selectMode}}</p>
│   │   │         <button class="menu-button" data-navigate="/pong/singleplayer">{{singlePlayer}}</button>
│   │   │         <button class="menu-button" data-navigate="/pong/multiplayer">{{multiplayer}}</button>
│   │   │         <button class="menu-button" data-navigate="/pong/remote-multiplayer">Multiplayer Remoto</button>
│   │   │         <br>
│   │   │         <button class="menu-button mt-8" data-navigate="/">{{backToMenu}}</button>
│   │   │       </div>
│   │   ├── creators.html
│   │   │   └── Conteúdo de creators.html:
│   │   │       <div>
│   │   │         <h1 class="text-4xl text-glow mb-8">{{creatorsTitle}}</h1>
│   │   │         <p>{{creatorsText}}</p>
│   │   │         <button class="menu-button mt-8" data-navigate="/">{{backToMenu}}</button>
│   │   │       </div>
│   │   ├── pongGame.html
│   │   │   └── Conteúdo de pongGame.html:
│   │   │       <div>
│   │   │         <p class="mb-2">{{pongInstructions}}</p>
│   │   │         <canvas id="pongCanvas" width="800" height="600" class="bg-black border-4 border-white rounded-lg shadow-retro"></canvas>
│   │   │         <br>
│   │   │         <button class="menu-button" data-navigate="/">{{backToMenu}}</button>
│   │   │       </div>
│   │   ├── profile.html
│   │   │   └── Conteúdo de profile.html:
│   │   │       <div>
│   │   │         <h1 class="text-4xl text-glow mb-8">{{profileTitle}}: {{user.Username}}</h1>
│   │   │         <img src="{{user.ProfilePic}}" alt="Foto de Perfil" class="w-32 h-32 rounded-full mx-auto border-4 border-white shadow-retro mb-4">
│   │   │         <div class="text-left max-w-sm mx-auto bg-slate-800 p-4 rounded-lg">
│   │   │           <p class="mb-2"><strong class="text-indigo-400">Email:</strong> {{user.Email}}</p>
│   │   │           <p class="mb-2"><strong class="text-indigo-400">Status:</strong> <span class="{{user.statusColor}}">{{user.statusText}}</span></p>
│   │   │           <p class="mb-2"><strong class="text-indigo-400">{{matchesPlayed}}:</strong> {{user.matchesPlayed}}</p>
│   │   │           <p class="mb-2"><strong class="text-indigo-400">{{wins}}:</strong> {{user.wins}}</p>
│   │   │           <p class="mb-2"><strong class="text-indigo-400">{{loses}}:</strong> {{user.loses}}</p>
│   │   │           <p class="mb-2"><strong class="text-indigo-400">{{lastLogin}}:</strong> {{user.formattedLastLogin}}</p>
│   │   │         </div>
│   │   │         <button id="logout-button" class="menu-button mt-4 bg-red-700 hover:bg-red-600">Sair</button>
│   │   │         <button class="menu-button mt-8" data-navigate="/">{{backToMenu}}</button>
│   │   │         </div>
│   │   │       </div>